using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web;
using Support;

namespace dek_erpvis_v2.cls
{
    public class myclass
    {
        public static string GetConnByDetaSowon = clsDB_Server.GetConntionString_MsSQL("192.168.1.210", "FJWSQL", "dek", "asus54886961");
        public static string GetConnByDetaEip = clsDB_Server.GetConntionString_MsSQL("192.168.1.210", "Eip", "dek", "asus54886961");
        public static string GetConnByDekERP = clsDB_Server.GetConntionString_MySQL("192.168.1.43", "ERP", "jroot", "erp89886066");
        public static string GetConnByDekVisErp = clsDB_Server.GetConntionString_MsSQL("192.168.1.46,5872", "dekVisErp", "sa", "asus54886961");
        public static string GetConnByDekVisErpTest = clsDB_Server.GetConntionString_MsSQL("192.168.1.46,5872", "dekVisErpTest", "sa", "asus54886961");
        public static string GetConnByDekVisCnc_inside = clsDB_Server.GetConntionString_MySQL("192.168.1.46", "cnc_db", "erp", "erp89886066");
        public static string GetConnByDekVisCnc_outside = clsDB_Server.GetConntionString_MySQL("211.23.49.172", "cnc_db", "erp", "erp89886066");
        public static string GetConnByDekdekVisAssm = clsDB_Server.GetConntionString_MsSQL("192.168.1.46,5872", "dekVisAssm", "sa", "asus54886961");
        public static string GetConnByDekdekVisAps = clsDB_Server.GetConntionString_MySQL("192.168.1.46", "cnc_db", "erp", "erp89886066");
        public static string GetConnByDekAPS = clsDB_Server.GetConntionString_MySQL("192.168.1.46", "dek_aps", "erp", "erp89886066");

        public static string GetConnByDekdekVisAssmHor = clsDB_Server.GetConntionString_MsSQL("210.61.157.250,5872", "DetaVisHor", "sa", "asus54886961");
        public static string logout_url = "../../login.aspx";
        public static string Base64Encode(string AStr)
        {   //編碼兩次
            AStr = Convert.ToBase64String(Encoding.UTF8.GetBytes(AStr));
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(AStr));
            //return HttpContext.Current.Server.UrlEncode(AStr);
        }
        public static string Base64Decode(string ABase64)
        {
            //解碼兩次
            ABase64 = Encoding.UTF8.GetString(Convert.FromBase64String(ABase64));
            return Encoding.UTF8.GetString(Convert.FromBase64String(ABase64));
            //return HttpContext.Current.Server.UrlDecode(ABase64);
        }
        public bool user_view_check(string URL_NAME, string user_ID)
        {
            bool check = false;
            clsDB_Server clsDB = new clsDB_Server(GetConnByDekVisErp);
            string ss = "SELECT * FROM WEB_USER where WB_URL = '" + URL_NAME + "' and user_ACC = '" + user_ID + "' and VIEW_NY = 'Y'";
            DataTable dt = clsDB.DataTable_GetRow(ss);
            if (dt.Rows.Count > 0) check = true;
            return check;

        }
        public string check_user_power(string acc_)
        {
            DataTableUtils.Conn_String = myclass.GetConnByDekVisErp;
            DataRow row = DataTableUtils.DataTable_GetDataRow("USERS", "USER_ACC = '" + acc_ + "'");
            return DataTableUtils.toString(row["ADM"]);
        }
        public int get_ran_id()
        {
            Random Rnd = new Random();
            return Rnd.Next(99999);
        }
        public DataTable user_login(string USER_ACC, string USER_PWD)
        {
            string cmd = "";
            if (Regex.IsMatch(USER_ACC, @"^09[0-9]{8}$") == true)
            {
                cmd = "user_num = '" + USER_ACC + "'";
            }
            else
            {
                cmd = "user_acc = '" + USER_ACC + "'";
            }
            clsDB_Server clsDB = new clsDB_Server(GetConnByDekVisErp);

            string sqlcmd = "SELECT * FROM USERS where " + cmd + " and user_pwd = '" + USER_PWD + "'";
            DataTable dt = clsDB.DataTable_GetRow(sqlcmd);
            return dt;
        }
        public string conn_test(string ip, string port)
        {
            bool isConnection = Conn_testing(ip, DataTableUtils.toInt(port));
            if (isConnection)
            {
                GlobalVar.Conn_status = true;
            }
            else
            {
                GlobalVar.Conn_status = false;
            }

            return "";
        }
        public bool Conn_testing(string ip, int port)
        {
            try
            {
                using (TcpClient tcp_conn = new TcpClient())
                {
                    IAsyncResult result = tcp_conn.BeginConnect(ip, port, null, null);
                    DateTime start = DateTime.Now;
                    do
                    {
                        SpinWait.SpinUntil(() => { return false; }, 100);
                        if (result.IsCompleted) break;
                    }
                    while (DateTime.Now.Subtract(start).TotalSeconds < 0.3);
                    if (result.IsCompleted)
                    {
                        tcp_conn.EndConnect(result);
                        return true;
                    }
                    tcp_conn.Close();
                    if (!result.IsCompleted)
                    {
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
            return false;

        }
        public DataView Add_LINE_GROUP(DataTable dt)
        {
            GlobalVar.UseDB_setConnString(GetConnByDekVisErp);//切換至可視化資料庫
            //--------------------------------------------------------------------------
            //DataTableUtils.DataTable_AddColumns(dt, field_list);
            DataTable dr =dt;

            dt.Columns.Add("產線群組", typeof(string));

            foreach (DataRow row in dt.Rows)
            {
                string LINE_ID = DataTableUtils.toString(row["產線代號"]);
                string LINE_GROUP = DataTableUtils.toString(row["產線群組"]);
                if (LINE_GROUP == "")
                {
                    string sqlcmd = 德大機械.業務部_成品庫存分析.產線群組列表(LINE_ID);
                    //
                    DataRow row_ = null;
                    try
                    {
                        row_ = DataTableUtils.DataTable_GetDataRow(sqlcmd);
                        row["產線群組"] = DataTableUtils.toString(row_["GROUP_NAME"]);
                    }
                    catch
                    {
                        dr.Columns.RemoveAt(dr.Columns.Count-1);
                        Add_LINE_GROUP(dr);
                    }

                   
                }
            }
            DataView dv = new DataView(dt);
            dv.Sort = "產線群組 asc";
            dv.ToTable();

            //--------------------------------------------------------------------------
            //GlobalVar.UseDB_setConnString(GetConnByDetaSowon);//返回首旺資料
            return dv;

        }
        public DataView Add_LINE_GROUP(DataTable dt, string 群組欄位名稱, string 產線欄位名稱)
        {
            GlobalVar.UseDB_setConnString(GetConnByDekVisErp);//切換至可視化資料庫
                                                              //--------------------------------------------------------------------------
                                                              //DataTableUtils.DataTable_AddColumns(dt, field_list);
            DataTable dr = dt;
            dt.Columns.Add(群組欄位名稱, typeof(string));
            foreach (DataRow row in dt.Rows)
            {
                string LINE_ID = DataTableUtils.toString(row[產線欄位名稱]);
                string LINE_GROUP = DataTableUtils.toString(row[群組欄位名稱]);
                if (LINE_GROUP == "")
                {
                    string sqlcmd = 德大機械.業務部_成品庫存分析.產線群組列表(LINE_ID);
                    DataRow row_ = null;
                    try
                    {
                        row_ = DataTableUtils.DataTable_GetDataRow(sqlcmd);
                        row[群組欄位名稱] = DataTableUtils.toString(row_["GROUP_NAME"]);
                    }
                    catch
                    {
                        dr.Columns.RemoveAt(dr.Columns.Count - 1);
                        Add_LINE_GROUP(dr, 群組欄位名稱, 產線欄位名稱);
                    }
                    if (row_ == null)
                    {

                    }

                    
                }
            }
            DataView dv = new DataView(dt);
            dv.Sort = "" + 群組欄位名稱 + " asc";
            dv.ToTable();

            //--------------------------------------------------------------------------
            //GlobalVar.UseDB_setConnString(GetConnByDetaSowon);//返回首旺資料
            return dv;


        }
        public string string_format(string yyyyMMdd)
        {
            return yyyyMMdd.Substring(0, 4) + "-" + yyyyMMdd.Substring(4, 2) + "-" + yyyyMMdd.Substring(6, 2);
        }
        public string 檢查是否符合規則(string 字串, string 自訂規則)
        {
            //^[\u4e00-\u9fa5_a-zA-Z0-9]+$
            //^([\w\d\u4e00-\u9fa5],?)+$
            if (!Regex.IsMatch(字串, 自訂規則))
            {
                字串 = "無法顯示";
            }
            return 字串;
        }
        public string date_trn(string days)
        {
            Double val = DataTableUtils.toDouble(days);
            return DataTableUtils.toString(DateTime.Now.AddDays(-val).ToString("yyyyMMdd"));
        }

    }
}