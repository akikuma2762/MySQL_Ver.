using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
using System.Web.UI.WebControls;
using System.Collections.Specialized;
using System.Drawing;
using System.IO;
using System.Net;
using System.Text;
using Support;


namespace dek_erpvis_v2.cls
{
    public class ShareFunction
    {
        public enum departmentSelect { 個人, 列表 };
        enum ErrorProcessStatus { 處理, 結案 };
        //
        clsDB_Server clsDB_Switch = new clsDB_Server("");
        //connect String
        public string GetConnByDekdekVisAssm = clsDB_Server.GetConntionString_MsSQL("210.61.157.250,5872", "dekVisAssm", "sa", "asus54886961");
        public string GetConnByDekdekVisAssmTest = clsDB_Server.GetConntionString_MsSQL("210.61.157.250,5872", "dekVisAssmTest", "sa", "asus54886961");
        public string GetConnByDekdekVisAssmHor = clsDB_Server.GetConntionString_MsSQL("210.61.157.250,5872", "DetaVisHor", "sa", "asus54886961");
        public string GetConnByDekVisErp = clsDB_Server.GetConntionString_MsSQL("210.61.157.250,5872", "dekVisErp", "sa", "asus54886961");
        public string GetConnByDekVisTmp = clsDB_Server.GetConntionString_MsSQL("210.61.157.250,5872", "dekVisAssm", "sa", "asus54886961");
        //
        string change = "";
        string _cTotalTagetPiece;
        public string cTotalTagetPiece { get { return _cTotalTagetPiece; } set { _cTotalTagetPiece = value; } }
        string _cTotalTagetPerson;
        public string cTotalTagetPerson { get { return _cTotalTagetPerson; } set { _cTotalTagetPerson = value; } }
        string _cTotalFinishPiece;
        public string cTotalFinishPiece { get { return _cTotalFinishPiece; } set { _cTotalFinishPiece = value; } }
        string _cTotalErrorPiece;
        public string cTotalErrorPiece { get { return _cTotalErrorPiece; } set { _cTotalErrorPiece = value; } }
        string _cTotalOnLinePiece;
        public string cTotalOnLinePiece { get { return _cTotalOnLinePiece; } set { _cTotalOnLinePiece = value; } }
        //==========
        string _td_cTotalFinishPiece;
        public string td_cTotalFinishPiece { get { return _td_cTotalFinishPiece; } set { _td_cTotalFinishPiece = value; } }
        string _td_cTotalErrorPiece;
        public string td_cTotalErrorPiece { get { return _td_cTotalErrorPiece; } set { _td_cTotalErrorPiece = value; } }
        string _td_cTotalOnLinePiece;
        public string td_cTotalOnLinePiece { get { return _td_cTotalOnLinePiece; } set { _td_cTotalOnLinePiece = value; } }
        //======================================================================================
        public List<string> AnsQueryString(string QueryString)
        {
            string[] Qstr;
            string[] QSubStr = new string[2] { "0", "0" };
            List<string> StrParList = new List<string>();
            if (!string.IsNullOrEmpty(QueryString))
            {
                Qstr = QueryString.Split(',');
                StrParList.Add(Qstr[0]); // First  ?AA = 1
                if (Qstr.Length > 1)
                {
                    foreach (string Str in Qstr)
                    {
                        QSubStr = Str.Split('=');
                        if (QSubStr.Length > 1)
                            StrParList.Add(QSubStr[1]);
                    }
                }
                return StrParList;
            }
            else
                return StrParList;
        }

        public int SetErrorDataToDataTable(string LineNum, string Pk, string ErrorType)
        {
            bool OK = false;
            int ErrorNum = 0;
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            DataTable dt_er = DataTableUtils.DataTable_GetRowHeader(ShareMemory.SQLAsm_WorkStation_Error);
            DataRow dr = dt_er.NewRow();
            ErrorNum = GetSeriesNum(ShareMemory.SQLAsm_WorkStation_Error, 0);
            dr["異常排除時間"] = "Time";
            dr["異常編號"] = ErrorNum;
            dr["異常起始時間"] = DateTime.Now.ToString("yyyyMMddHHmmss");
            dr["異常原因"] = ErrorType;
            dr["工作站編號"] = LineNum;
            dr["排程編號"] = Pk;
            OK = DataTableUtils.Insert_DataRow(ShareMemory.SQLAsm_WorkStation_Error, dr);
            return ErrorNum;
        }

        //儲存
        public bool SetMantDataToDataTable(string Account, string key, string ErrorType, string InputStr, string dep, string Status, List<string> StationInf, string value, string Image_Save = "")
        {
            if (Account == "visrd")
                value = "0";
            InputStr = InputStr.Replace("'", " ");
            string backman = "";
            ////Mant
            bool OK = false;
            bool ProcessOK = false;
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            string condition = "";
            string SqlStr = "select Top 1 * From " + ShareMemory.SQLAsm_WorkStation_ErrorMant + " where 排程編號 = " + "'" + key + "'" + " ORDER BY " + "異常維護編號" + " desc";
            //int UserLevel = GetACCLevel(Account);
            DataTable dt_er = DataTableUtils.DataTable_GetTable(SqlStr);
            DataRow dt_Name = GetAccInf(Account);
            if (dt_er == null)
                dt_er = DataTableUtils.DataTable_GetRowHeader(ShareMemory.SQLAsm_WorkStation_ErrorMant);
            if (Status == ErrorProcessStatus.結案.ToString())
                ProcessOK = true;
            //
            DataRow dr = dt_er.NewRow();
            int ErrorNum = GetSeriesNum(ShareMemory.SQLAsm_WorkStation_ErrorMant, 0);
            dr["異常維護編號"] = ErrorNum;
            dr["排程編號"] = key;
            dr["時間紀錄"] = DateTime.Now.ToString();
            dr["維護人員單位"] = dep;
            dr["維護內容"] = InputStr;
            dr["異常原因類型"] = ErrorType;
            dr["處理狀態"] = ProcessOK;
            dr["圖片檔名"] = Image_Save;

            if (dt_Name != null)
            {
                dr["維護人員姓名"] = dt_Name["USER_NAME"].ToString();
                backman = dt_Name["USER_NAME"].ToString();
            }
            if (GetConnByDekVisTmp.Contains("dekVisAssm"))
                condition = ShareMemory.PrimaryKey + "=" + "'" + key + "'";
            else
            {
                dr[ShareMemory.WorkStationNum] = StationInf[1].ToString();
                condition = ShareMemory.PrimaryKey + "=" + "'" + key + "'" + " AND " + ShareMemory.WorkStationNum + "=" + "'" + StationInf[1].ToString() + "'";
            }
            // Mantan Table
            bool ok = DataTableUtils.Insert_DataRow(ShareMemory.SQLAsm_WorkStation_ErrorMant, dr);
            // Status Table
            DataRow dr_status = DataTableUtils.DataTable_GetDataRow(ShareMemory.SQLAsm_WorkStation_State, condition);
            if (dr_status != null)
            {
                dr_status["維護"] = InputStr + " " + DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");
                dr_status["異常"] = ErrorType;
                OK = DataTableUtils.Update_DataRow(ShareMemory.SQLAsm_WorkStation_State, condition, dr_status);
                //Updata Flag
                Note_MachineID_Line_Updata(dr_status["工作站編號"].ToString());
                if (value == "1")
                    LineNote(DataTableUtils.toInt(dr_status["工作站編號"].ToString()), key, ErrorType, InputStr, GetConnByDekVisTmp, backman);
                return OK;
            }
            else
                return OK;
        }
        public void Set_MachineID_Line_Updata(string LineNum)
        {
            bool OK = false;
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            DataTable dt = DataTableUtils.GetDataTable(ShareMemory.SQLAsm_MachineID_Line, "機台產線代號" + "=" + "'" + LineNum + "'");
            foreach (DataRow dr in dt.Rows)
            {
                if (!(dr["是否有更新資料現場"].ToString().ToUpper() == "TRUE" || dr["是否有更新資料現場"].ToString().ToUpper() == "1"))
                {
                    dr["是否有更新資料現場"] = true;
                    //insert or updata
                    if (Support.DataTableUtils.RowCount(ShareMemory.SQLAsm_MachineID_Line, "機台產線代號" + "=" + "'" + LineNum + "'") != 0)
                        OK = Support.DataTableUtils.Update_DataRow(ShareMemory.SQLAsm_MachineID_Line, "機台編號 =" + "'" + dr["機台編號"].ToString() + "'", dr);
                }
            }
        }
        public DataRow Set_NewStatus(DataRow dr, string radio_Select, string Progress)
        {
            string NowTime = DateTime.Now.ToString("yyyyMMddHHmmss");
            if (dr != null)
            {
                //string radio_Select = RadioButtonList_select_type.SelectedValue;
                switch (radio_Select)
                {
                    case "0"://啟動
                        dr["狀態"] = "啟動";
                        if (dr["實際啟動時間"].ToString().ToUpper() == "NULL")
                            dr["實際啟動時間"] = NowTime;
                        dr["再次啟動時間"] = NowTime;
                        dr["進度"] = Progress.Trim('%');
                        break;
                    case "1"://暫停
                        dr["狀態"] = "暫停";
                        dr["暫停時間"] = NowTime;
                        dr["異常狀態號"] = SetErrorDataToDataTable(dr["工作站編號"].ToString(), dr[ShareMemory.PrimaryKey].ToString(), null);
                        dr["進度"] = Progress.Trim('%');
                        break;
                    case "2"://完成
                        dr["狀態"] = "完成";
                        dr["實際完成時間"] = NowTime;
                        dr["進度"] = "100";
                        break;
                }
            }
            return dr;
        }
        //有包try catch
        public string[] GetLineTotal(int infCount)
        {
            string td = "";
            int totalTaget = 0;
            int totalTagetPerson = 0;
            int totalFinish = 0;
            int totalError = 0;
            int totalOnLine = 0;
            int td_totalFinish = 0;
            int td_totalError = 0;
            int td_totalOnLine = 0;
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            string[] str = new string[2];//0:finish 1: //clsDB_sw
            DataTable dt_line = null;

            try
            {
                dt_line = DataTableUtils.DataTable_GetTable("select * from " + ShareMemory.SQLAsm_WorkStation_Type + " where 工作站是否使用中 = 1");
            }
            catch
            {
                GetLineTotal(infCount);
            }
            //DataTable dt_line = DataTableUtils.DataTable_GetTable("select * from " + ShareMemory.SQLAsm_WorkStation_Type);
            //DataTable dt_line = clsDB_sw.DataTable_GetTable("select * from 工作站型態資料表", 0, 0);
            if (dt_line.Rows.Count != 0)
            {
                DataTable dt_select = tableColumnSelectForTotalLine(dt_line);
                //Rows
                if (dt_select.Rows.Count != 0)
                {
                    for (int i = 0; i < dt_select.Rows.Count; i++)
                    {
                        td += "<tr class='gradeX'> \n";
                        for (int j = 0; j < dt_select.Columns.Count; j++)
                        {
                            if (dt_select.Columns[j].ColumnName != "工作站是否使用中" && dt_select.Columns[j].ColumnName != "工作站編號" && dt_select.Columns[j].ColumnName != "人數配置")
                            {
                                //if (dt_select.Rows[i]["工作站是否使用中"].ToString() == "1" || dt_select.Rows[i]["工作站是否使用中"].ToString().ToUpper() == "TRUE")
                                if (DataTableUtils.toInt(dt_select.Rows[i]["暫停"].ToString()) != 0)
                                {
                                    //  td += "<td style='text-align:center;background-color:lightcoral;'><u><a href='/pages/dp_PM/Asm_LineOverView.aspx?LineNum=" + DataTableUtils.toString(dt_select.Rows[i]["工作站編號"]) + "'><span calss='modaltextstyle' style='color:#3f4a56'>" + DataTableUtils.toString(dt_select.Rows[i][j]) + "</span></u></a></td> \n";
                                    //td += "<td style='text-align:center;'><a href='/pages/dp_PM/Asm_LineOverView.aspx?LineNum=" + DataTableUtils.toString(dt_select.Rows[i]["工作站編號"]) + "'><span calss='modaltextstyle' style='color:#3f4a56'><u>" + DataTableUtils.toString(dt_select.Rows[i][j]) + "</u></span></a></td> \n";
                                    if (dt_select.Columns[j].ColumnName == "工作站名稱")
                                    {
                                        //td += "<td style='text-align:center;'><u><a href='/pages/dp_PM/Asm_LineOverView.aspx?LineNum=" + DataTableUtils.toString(dt_select.Rows[i]["工作站編號"]) + "," + "ReqType=Line" + "'>" + DataTableUtils.toString(dt_select.Rows[i][j]) + "</a></u></td> \n";
                                        string url = "LineNum=" + DataTableUtils.toString(dt_select.Rows[i]["工作站編號"]) + "," + "ReqType=Line";
                                        td += "<td style='text-align:center;'><u><a href='/pages/dp_PM/Asm_LineOverView.aspx?key=" + WebUtils.UrlStringEncode(url) + "'>" + DataTableUtils.toString(dt_select.Rows[i][j]) + "</a></u></td> \n";

                                    }
                                    else if (dt_select.Columns[j].ColumnName == "暫停")
                                    {
                                        //td += "<td style='text-align:center;background-color:lightcoral;color:white;font-size:20px;'><u><a href='/pages/dp_PM/Asm_LineOverView.aspx?LineNum=" + DataTableUtils.toString(dt_select.Rows[i]["工作站編號"]) + "," + "ReqType=Error" + "'style='color:white;'>" + DataTableUtils.toString(dt_select.Rows[i][j]) + "</a></u></td> \n";
                                        string url = "LineNum=" + DataTableUtils.toString(dt_select.Rows[i]["工作站編號"]) + "," + "ReqType=Error";
                                        td += "<td style='text-align:center;background-color:lightcoral;color:white;font-size:20px;'><u><a href='/pages/dp_PM/Asm_LineOverView.aspx?key=" + WebUtils.UrlStringEncode(url) + "' style='color:white;'>" + DataTableUtils.toString(dt_select.Rows[i][j]) + "</a></u></td> \n";
                                        //td += "<td style='text-align:center;background-color:lightcoral;color:white;font-size:20px;'>" + DataTableUtils.toString(dt_select.Rows[i][j]) + "</td> \n";
                                    }
                                    else if (dt_select.Columns[j].ColumnName == "目標件數")
                                        td += "<td style='text-align:center;'>" + DataTableUtils.toString(dt_select.Rows[i][j].ToString() + "<span style='height:5px'>" + "件" + "</span>" + "/" + dt_select.Rows[i]["人數配置"].ToString() + "<span style='height:5px'>" + "人" + "</span>") + "</td> \n";
                                    else if (dt_select.Columns[j].ColumnName == "今日完成" || dt_select.Columns[j].ColumnName == "今日暫停" || dt_select.Columns[j].ColumnName == "今日生產中")
                                    {

                                    }
                                    else
                                        td += "<td style='text-align:center;'>" + DataTableUtils.toString(dt_select.Rows[i][j]) + "</td> \n";//<span style="height: 10px"><%=PieceUnit%></span>
                                }
                                else if (dt_select.Columns[j].ColumnName == "今日完成" || dt_select.Columns[j].ColumnName == "今日暫停" || dt_select.Columns[j].ColumnName == "今日生產中")
                                {

                                }
                                else
                                {
                                    if (dt_select.Columns[j].ColumnName == "工作站名稱")//.ASPX?+parameter(Ex:LineNum=1)
                                    {
                                        string url = "LineNum=" + DataTableUtils.toString(dt_select.Rows[i]["工作站編號"]) + "," + "ReqType=Line";
                                        td += "<td style='text-align:center;'><u><a href='/pages/dp_PM/Asm_LineOverView.aspx?key=" + WebUtils.UrlStringEncode(url) + "'>" + DataTableUtils.toString(dt_select.Rows[i][j]) + "</u></a></td>\n";

                                    }
                                    else if (dt_select.Columns[j].ColumnName == "目標件數")
                                        td += "<td style='text-align:center;'>" + DataTableUtils.toString(dt_select.Rows[i][j].ToString() + "<span style='height:5px'>" + "件" + "</span>" + "/" + dt_select.Rows[i]["人數配置"].ToString() + "<span style='height:5px'>" + "人" + "</span>") + "</td>\n";
                                    else if (dt_select.Columns[j].ColumnName == "今日完成" || dt_select.Columns[j].ColumnName == "今日暫停" || dt_select.Columns[j].ColumnName == "今日生產中")
                                    {

                                    }
                                    else
                                        td += "<td style='text-align:center;'>" + DataTableUtils.toString(dt_select.Rows[i][j]) + "</td>\n";
                                }
                            }
                            else
                                continue;
                        }
                        // Count Piece
                        totalTaget += DataTableUtils.toInt(dt_select.Rows[i]["目標件數"].ToString());
                        totalTagetPerson += DataTableUtils.toInt(dt_select.Rows[i]["人數配置"].ToString());
                        totalFinish += DataTableUtils.toInt(dt_select.Rows[i]["完成"].ToString());
                        totalError += DataTableUtils.toInt(dt_select.Rows[i]["暫停"].ToString());
                        totalOnLine += DataTableUtils.toInt(dt_select.Rows[i]["生產中"].ToString());
                        td_totalFinish += DataTableUtils.toInt(dt_select.Rows[i]["今日完成"].ToString());
                        td_totalError += DataTableUtils.toInt(dt_select.Rows[i]["今日暫停"].ToString());
                        td_totalOnLine += DataTableUtils.toInt(dt_select.Rows[i]["今日生產中"].ToString());
                        td += "</tr> \n";
                    }
                    str[1] = td;
                    _cTotalTagetPiece = totalTaget.ToString();
                    _cTotalTagetPerson = totalTagetPerson.ToString();
                    _cTotalFinishPiece = totalFinish.ToString();
                    _cTotalErrorPiece = totalError.ToString();
                    _cTotalOnLinePiece = totalOnLine.ToString();
                    _td_cTotalFinishPiece = td_totalFinish.ToString();
                    _td_cTotalErrorPiece = td_totalError.ToString();
                    _td_cTotalOnLinePiece = td_totalOnLine.ToString();
                    return str;
                }
                else
                    return str;
            }
            else
            {
                str[0] = " no data";
                return str;
            }
        }
        //有包TRY CATCH
        public string[] GetErrorRowsData(string ErrorID, ListItem Line, string ErrorType)
        {
            string td = "";
            string[] str = new string[4];//0:un 1:html cmd
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            string Condition = GetErrorSearchCondition(ErrorID, Line.Value, ErrorType);
            Condition = Condition + " AND 異常原因 is not null";
            //string Condition = "排程編號 = " + "'" + ErrorID + "'";
            // string Condition = "排程編號 like " + "'" +"%"+ ErrorID +"%"+ "'";
            string Sql = "select * from 工作站異常紀錄資料表 INNER JOIN 工作站型態資料表 ON 工作站異常紀錄資料表.工作站編號 = 工作站型態資料表.工作站編號" + " where " + Condition;
            DataTable dt = null;
            try
            {
                dt = DataTableUtils.GetDataTable(Sql);
            }
            catch
            {
                GetErrorRowsData(ErrorID, Line, ErrorType);
            }


            //DataTable dt = DataTableUtils.DataTable_GetTable(ShareMemory.SQLAsm_WorkStation_Error, Condition);
            if (dt != null)
            {
                DataTable dt_select = tableColumnSelectForErrorSearchList(dt);
                // "排程編號", "異常編號", "工作站編號", "異常原因"
                //Rows
                if (dt_select.Rows.Count != 0)
                {
                    for (int i = 0; i < dt_select.Rows.Count; i++)
                    {
                        td += "<tr class='gradeX'> \n";
                        for (int j = 0; j < dt_select.Columns.Count; j++)
                        {
                            if (dt_select.Columns[j].ColumnName == "工作站編號")//維護人員姓名                              
                                td += "<td style='text-align:center;'>" + DataTableUtils.toString(dt_select.Rows[i]["工作站名稱"]) + "</td> \n";
                            else if (dt_select.Columns[j].ColumnName == "異常原因")//維護人員姓名   
                            {
                                if (dt_select.Rows[i]["異常起始時間"].ToString() != "" && dt_select.Rows[i]["異常起始時間"].ToString() != null && dt_select.Rows[i]["異常起始時間"].ToString().ToUpper() != "NULL")
                                {
                                    //Key=ErrorChat,LineNum=2,Value=物料品質不良,StartTime=20190201,EndTime=20190228
                                    td += "<td style='text-align:center;'>" + "<u><a href='Asm_Cahrt_Detail.aspx?Key=ErrorSearch_Detail" + "," + "LineNum=" + dt.Rows[i]["工作站編號"].ToString() + "," + "Value1=" + DataTableUtils.toString(dt_select.Rows[i]["排程編號"]) + "," + "Value2=" + dt.Rows[i]["異常原因"].ToString() + "'" + ">" + "</u>" + " " + DataTableUtils.toString(dt_select.Rows[i][j]) + " <br >"
                                         // td += "<td style='text-align:center;'><a href='Asm_Cahrt_Detail.aspx?Key=" + DataTableUtils.toString(dt_select.Rows[i]["排程編號"]) + "," + "LineNum=" + dt.Rows[i]["工作站編號"].ToString() + "," + "Value=" + dt.Rows[i]["異常原因"].ToString() + "'" + ">" + DataTableUtils.toString(dt_select.Rows[i][j]) + " <br >"
                                         + "<span style='font-size:4px ;text-align:right;color:gray;'> " + DateTime.ParseExact(dt_select.Rows[i]["異常起始時間"].ToString(), "yyyyMMddHHmmss", System.Globalization.CultureInfo.CurrentCulture).ToString("yyyy-MM-dd HH:mm:ss") + " <br ></ span >"
                                        + "</a></td> \n";
                                }
                                else
                                    td += "<td style='text-align:center;'><a href='Asm_ErrorSearchDetail.aspx?ErrorID=" + DataTableUtils.toString(dt_select.Rows[i]["排程編號"]) + "," + "ErrorLineNum=" + dt.Rows[i]["工作站編號"].ToString() + "," + "ErrorType=" + dt.Rows[i]["異常原因"].ToString() + "'" + ">" + DataTableUtils.toString(dt_select.Rows[i][j]) + "</a></td> \n";
                            }
                            else if (dt_select.Columns[j].ColumnName == "異常起始時間")//維護人員姓名   
                            {
                                //none
                            }
                            else if (dt_select.Columns[j].ColumnName == "工作站名稱")//維護人員姓名   
                            {
                                //none
                            }
                            else
                                td += "<td style='text-align:center;'>" + DataTableUtils.toString(dt_select.Rows[i][j]) + "</td> \n";
                        }
                        td += "</tr> \n";
                    }
                    str[1] = td;
                    return str;
                }
                else
                {
                    return str;
                }
            }
            else
            {
                str[0] = " no data";
                return str;
            }
        }
        public string[] GetHistoryRowsData(string ErrorID, ListItem Line)
        {
            string td = "";
            string[] str = new string[4];//0:un 1:html cmd
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            DateTime time = new DateTime();
            string Condition = GetHistorySearchCondition(ErrorID, Line.Value);
            //string Condition = "排程編號 = " + "'" + ErrorID + "'";
            // string Condition = "排程編號 like " + "'" +"%"+ ErrorID +"%"+ "'";
            string Sql = "select * from " + ShareMemory.SQLAsm_WorkStation_State + " INNER JOIN 工作站型態資料表 ON 工作站狀態資料表.工作站編號 = 工作站型態資料表.工作站編號" + " where " + Condition;
            DataTable dt = null;
            try
            {
                dt = DataTableUtils.GetDataTable(Sql);
            }
            catch
            {
                GetHistoryRowsData(ErrorID, Line);
            }

            //DataTable dt = DataTableUtils.DataTable_GetTable(ShareMemory.SQLAsm_WorkStation_Error, Condition);
            if (dt != null)
            {
                DataTable dt_select = tableColumnSelectForHistorySearchList(dt);
                //  "排程編號", "工作站名稱", "實際啟動時間", "實際完成時間", "組裝累積時間");
                //Rows
                if (dt_select.Rows.Count != 0)
                {
                    for (int i = 0; i < dt_select.Rows.Count; i++)
                    {
                        td += "<tr class='gradeX'> \n";
                        for (int j = 0; j < dt_select.Columns.Count; j++)
                        {
                            if (dt_select.Columns[j].ColumnName == "排程編號")//維護人員姓名                              
                                td += "<td style='text-align:center;'>" + DataTableUtils.toString(dt_select.Rows[i]["排程編號"]) + "</td> \n";
                            else if (dt_select.Columns[j].ColumnName == "工作站名稱")//維護人員姓名   
                                td += "<td style='text-align:center;'>" + DataTableUtils.toString(dt_select.Rows[i]["工作站名稱"]) + "</td> \n";
                            else if (dt_select.Columns[j].ColumnName == "實際啟動時間")//維護人員姓名 
                            {
                                time = StrToDateTime(DataTableUtils.toString(dt_select.Rows[i]["實際啟動時間"]), "yyyyMMddHHmmss");
                                td += "<td style='text-align:center;'>" + time.ToString("yyyy/MM/dd HH:mm:ss") + "</td> \n";
                            }
                            else if (dt_select.Columns[j].ColumnName == "實際完成時間")//維護人員姓名  
                            {
                                time = StrToDateTime(DataTableUtils.toString(dt_select.Rows[i]["實際完成時間"]), "yyyyMMddHHmmss");
                                td += "<td style='text-align:center;'>" + time.ToString("yyyy/MM/dd HH:mm:ss") + "</td> \n";
                            }
                            else//組裝累積時間
                                td += "<td style='text-align:center;'>" + (DataTableUtils.toInt(dt_select.Rows[i][j].ToString()) / 60) + "</td> \n";
                        }
                        td += "</tr> \n";
                    }
                    str[1] = td;
                    return str;
                }
                else
                {
                    return str;
                }
            }
            else
            {
                str[0] = " no data";
                return str;
            }
        }
        //改這裡 有包TRY CATCH
        public string[] GetMantRowsData(string ErrorID, string LineNum, ref string[] _errorTitleShow, ref string[] _dep, ref string[] _status)
        {
            string td = "";
            string[] str = new string[6];//0:un 1:html cmd
            string[] strTime;
            string Condition = "";
            if (!GetConnByDekVisTmp.Contains("Hor"))
                Condition = "排程編號=" + "'" + ErrorID + "'";
            else
                Condition = "排程編號=" + "'" + ErrorID + "'" + " AND " + "工作站編號=" + "'" + LineNum + "'";

            int ErrorTitleCount = 0;
            List<string> Errors = new List<string>();
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            DataTable dt = null;
            try
            {
                dt = DataTableUtils.DataTable_GetTable(ShareMemory.SQLAsm_WorkStation_ErrorMant, Condition);
            }
            catch
            {
                GetMantRowsData(ErrorID, LineNum, ref _errorTitleShow, ref _dep, ref _status);
            }

            if (dt != null)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    if (ErrorTitleCount == 5)
                        break;
                    if (!Errors.Contains(dt.Rows[i]["異常原因類型"].ToString()))
                    {
                        Errors.Add(dt.Rows[i]["異常原因類型"].ToString());
                        _errorTitleShow[ErrorTitleCount] = dt.Rows[i]["異常原因類型"].ToString();
                        ErrorTitleCount++;
                    }
                }
                DataTable dt_select = EtableColumnSelectForLineDetail(dt);
                //Rows
                if (dt_select.Rows.Count != 0)
                {
                    // foreach (string ErrorType in Errors)
                    for (int m = 0; m < Errors.Count; m++)
                    {
                        for (int i = 0; i < dt_select.Rows.Count; i++)
                        {
                            if (dt_select.Rows[i]["異常原因類型"].ToString() == Errors[m].ToString())
                            {
                                //20191125 加上style='width:?%' 以維持資料表單欄位寬度
                                td += "<tr class='gradeX'> \n";
                                td += "<td> \n";
                                td += "<input  style='width:2%' type ='checkbox' name='items' value='" + dt_select.Rows[i]["異常維護編號"].ToString() + "' id ='check-all' class='flat'>\n";
                                td += "</td> \n";
                                for (int j = 0; j < dt_select.Columns.Count; j++)
                                {
                                    if (dt_select.Columns[j].ColumnName == "維護人員姓名")//維護人員姓名
                                    {
                                        strTime = dt_select.Rows[i]["時間紀錄"].ToString().Split(' ');
                                        /*td += "<td style='text-align:center;width:10%'>" + DataTableUtils.toString(dt_select.Rows[i][j]) + "<br>"
                                            + "<span style='font-size:8px ;text-align:right;color:red;'> <b>" + strTime[0] + "<br>" + strTime[1] + " " + strTime[2] + " </b></span ></td> \n";*/
                                        //SQL排序問題，10<7，故加此預防
                                        string[] st = strTime[0].Split('/');
                                        if (Int16.Parse(st[1]) < 10)
                                            st[1] = "0" + st[1];
                                        if (Int16.Parse(st[2]) < 10)
                                            st[2] = "0" + st[2];
                                        strTime[0] = st[0] + "/" + st[1] + "/" + st[2];
                                        td += "<td style='text-align:center;width:10%'>"
                                        + "<span style='font-size:8px ;text-align:right;color:red;'> <b>" + strTime[0] + strTime[1] + " " + strTime[2] + " </b></span><br>" + DataTableUtils.toString(dt_select.Rows[i][j]) + " <br></td> \n";
                                    }
                                    else if (dt_select.Columns[j].ColumnName == "時間紀錄")
                                    {
                                        //none
                                    }
                                    else if (dt_select.Columns[j].ColumnName == "異常原因類型")
                                    {
                                        //none
                                    }
                                    else if (dt_select.Columns[j].ColumnName == "維護人員單位")
                                    {
                                        if (DataTableUtils.toString(dt_select.Rows[i][j]) != "")
                                        {
                                            if (_dep[m] == "nodata")
                                                _dep[m] = DataTableUtils.toString(dt_select.Rows[i][j]);
                                            td += "<td style='text-align:center;width:7%'>" + DataTableUtils.toString(dt_select.Rows[i][j]) + "</td> \n";
                                        }
                                        else
                                        {
                                            if (_dep[m] == "nodata")
                                                _dep[m] = "生產部";
                                            td += "<td style='text-align:center;width:7%'>" + "生產部" + "</td> \n";
                                        }
                                    }
                                    else if (dt_select.Columns[j].ColumnName == "處理狀態")
                                    {
                                        _status[m] = DataTableUtils.toString(dt_select.Rows[i][j]);
                                    }
                                    else if (dt_select.Columns[j].ColumnName == "異常維護編號")
                                    {
                                        // td += "<td style='text-align:center;width:5%'>" + DataTableUtils.toString(dt_select.Rows[i][j]) + "</td> \n";
                                    }
                                    else if (dt_select.Columns[j].ColumnName == "圖片檔名")
                                    {
                                        if (DataTableUtils.toString(dt_select.Rows[i][j]) != "")
                                        {
                                            string[] name_list = DataTableUtils.toString(dt_select.Rows[i][j]).Split('\n');
                                            td += "<td style='text-align:left;width:76%'>";
                                            for (int x = 0; x < name_list.Length - 1; x++)
                                            {
                                                int num = x + 1;
                                                string[] sp = name_list[x].Split('.');
                                                if (sp[sp.Length - 1] == "mp4" || sp[sp.Length - 1] == "MP4")//判斷是影片或是圖片
                                                    td += "<u><a href = '" + name_list[x] + " ' target='_blank'>影片" + num + "</u><br>";
                                                else
                                                    td += "<u><a href = '" + name_list[x] + " ' target='_blank'>圖片" + num + "</u><br>";
                                            }
                                            td += "</td> \n";
                                        }
                                        else
                                        {
                                            td += "<td style='text-align:left;width:76%'>" + "" + "</td> \n";
                                        }

                                    }
                                    else
                                    {
                                        td += "<td style='text-align:left;width:76%'>" + DataTableUtils.toString(dt_select.Rows[i][j]) + "</td> \n";
                                    }
                                }
                                td += "</tr> \n";
                            }
                        }
                        str[m] = td;
                        td = "";
                    }
                    return str;
                }
                else
                {
                    return str;
                }
            }
            else
            {
                str[0] = "";
                return str;
            }
        }
        //有包TRY CATCH
        public string[] GetTagetPiece(int LineNum)
        {
            string[] str = new string[3];//0:piece 1:LineName
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            string StrCmd = "工作站編號=" + LineNum;
            DataRow dr_taget = null;
            try
            {
                dr_taget = DataTableUtils.DataTable_GetDataRow(ShareMemory.SQLAsm_WorkStation_Type, StrCmd);
            }
            catch
            {
                GetTagetPiece(LineNum);
            }

            if (dr_taget != null)
            {
                str[0] = dr_taget["目標件數"].ToString();
                str[1] = dr_taget["工作站名稱"].ToString();
                str[2] = dr_taget["人數配置"].ToString();
                return str;
            }
            else
            {
                str[0] = "Null";
                return str;
            }
        }
        //有包TRY CATCH
        public string[] GetOverViewData(int LineNum, string LineName, string Acc, string _reqType, string judge = "")
        {
            string td = "";
            string[] str = new string[7] { "0", "0", "0", "0", "0", "0", "0" };//0:all   1:finsh   2:Stop  3:all   4:td_finish   5:td_Stop  7:Data
            string[] ErrorStr;
            string SubError = "";
            string Condition = "";
            string Condition1 = "";
            string Condition2 = "";
            string PredictionTimeStatus = "";
            int PredictionProgress = 0;
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            if (_reqType == "Line")
            {
                // Condition = "工作站編號 = " + "'" + LineNum + "'" + " AND " + "實際組裝時間 =" + "'" + DateTime.Now.ToString("yyyyMMdd").ToString() + "'";
                Condition1 = "工作站編號 = " + "'" + LineNum.ToString() + "'" + " AND " + "實際組裝時間 =" + "'" + DateTime.Now.ToString("yyyyMMdd").ToString() + "'";
                Condition2 = "工作站編號 = " + "'" + LineNum.ToString() + "'" + " AND " + "實際組裝時間 <=" + "'" + DateTime.Now.ToString("yyyyMMdd").ToString() + "'" + " AND " + "狀態!=" + "'" + "完成" + "'";
                Condition = Condition1 + " OR " + Condition2 + " order by " + "組裝日" + "," + "組裝編號";
            }
            else
            {
                // Condition = "工作站編號 = " + "'" + LineNum + "'" + " AND " + "實際組裝時間 =" + "'" + DateTime.Now.ToString("yyyyMMdd").ToString() + "'";
                Condition1 = "工作站編號 = " + "'" + LineNum.ToString() + "'" + " AND " + "實際組裝時間 =" + "'" + DateTime.Now.ToString("yyyyMMdd").ToString() + "'" + " AND " + "狀態=" + "'" + "暫停" + "'";
                Condition2 = "工作站編號 = " + "'" + LineNum.ToString() + "'" + " AND " + "實際組裝時間 <=" + "'" + DateTime.Now.ToString("yyyyMMdd").ToString() + "'" + " AND " + "狀態=" + "'" + "暫停" + "'";
                Condition = "(" + Condition1 + ")" + " OR " + "(" + Condition2 + ")" + " order by " + "組裝日" + "," + "組裝編號";
            }
            //int UserLevel = GetACCLevel(Acc);
            DataTable dt = null;
            try
            {
                dt = DataTableUtils.DataTable_GetTable(ShareMemory.SQLAsm_WorkStation_State, Condition);
            }
            catch
            {
                GetOverViewData(LineNum, LineName, Acc, _reqType, judge);
            }

            if (dt.Rows.Count != 0)
            {
                DataTable dt_select = tableColumnSelectForLineDetail(dt, LineNum.ToString());
                str = GetEachPiece(dt);
                //Columns --目前固定的
                //Rows
                if (dt_select.Rows.Count != 0)
                {
                    for (int i = 0; i < dt_select.Rows.Count; i++)
                    {
                        td += "<tr class='gradeX'> \n";
                        for (int j = 0; j < dt_select.Columns.Count; j++)
                        {
                            if (dt_select.Columns[j].ColumnName == "狀態")
                            {
                                //20191125 加上style='width:?%' 以維持資料表單欄位寬度
                                if (!GetRW(Acc))
                                {
                                    // style="text-align:center;"
                                    if (dt.Rows[i]["狀態"].ToString() == "暫停")
                                        td += "<td style='color: red;text-align:center;width:10%'> " + dt.Rows[i]["進度"].ToString() + "%" + " </td> \n";
                                    else if (dt.Rows[i]["狀態"].ToString() == "完成")
                                        td += "<td style='color: green;text-align:center;width:10%'> " + dt.Rows[i]["進度"].ToString() + "%" + " </td> \n";
                                    else if (dt.Rows[i]["狀態"].ToString() == "啟動")
                                        td += "<td style='color: blue;text-align:center;width:10%'> " + dt.Rows[i]["進度"].ToString() + "%" + " </td> \n";
                                    else
                                        td += "<td style='color:black;text-align:center;width:10%'> " + dt.Rows[i]["進度"].ToString() + "%" + " </td> \n";
                                }
                                else // superviser
                                {
                                    if (dt.Rows[i]["狀態"].ToString() == "暫停")
                                        // td += "<td  style=text-align:left;><i class='fa fa-pencil-square-o'></i><a href='javascript:void(0)' onclick='ChangeStatus(" + '"' + dt.Rows[i]["排程編號"].ToString() + '"' + ")' data-toggle='modal' data-target='#exampleModal'><span style='color: red;text-align:center;'> " + "暫停" + "</span> </a></td> \n";
                                        td += "<td style='text-align:center;width:10%'><a href='javascript:void(0)' onclick='ChangeStatus(" + '"' + dt.Rows[i]["排程編號"].ToString() + '"' + ")' data-toggle='modal' data-target='#exampleModal'> <span style=color:red><u>" + dt.Rows[i]["進度"].ToString() + "%" + "</u></span></a></td> \n";
                                    else if (dt.Rows[i]["狀態"].ToString() == "完成")
                                        td += "<td style='text-align:center;width:10%'><a href='javascript:void(0)' onclick='ChangeStatus(" + '"' + dt.Rows[i]["排程編號"].ToString() + '"' + ")' data-toggle='modal' data-target='#exampleModal'><span style=color:green><u> " + dt.Rows[i]["進度"].ToString() + "%" + "</u></span></a></td> \n";
                                    else if (dt.Rows[i]["狀態"].ToString() == "啟動")
                                        td += "<td style='text-align:center;width:10%'><a href='javascript:void(0)' onclick='ChangeStatus(" + '"' + dt.Rows[i]["排程編號"].ToString() + '"' + ")' data-toggle='modal' data-target='#exampleModal'><span style=color:blue><u>" + dt.Rows[i]["進度"].ToString() + "%" + "</u></span></a></td> \n";
                                    else
                                        td += "<td style='text-align:center;width:10%'><a href='javascript:void(0)' onclick='ChangeStatus(" + '"' + dt.Rows[i]["排程編號"].ToString() + '"' + ")' data-toggle='modal' data-target='#exampleModal'><span style=color:black><u>" + dt.Rows[i]["進度"].ToString() + "%" + "</u></span></a> </td> \n";
                                }
                            }
                            else if (dt_select.Columns[j].ColumnName == "進度")
                            {
                                //td += "<td style='color: black;text-align:center;'> " + DataTableUtils.toString(dt_select.Rows[i][j]) + "%" + " </td> \n";
                            }
                            else if (dt_select.Columns[j].ColumnName == "組裝日")
                            {
                                td += "<td style='text-align:center;width:10%'>" + DataTableUtils.toString(dt_select.Rows[i][j].ToString().Substring(4, 2)) + "/" + DataTableUtils.toString(dt_select.Rows[i][j].ToString().Substring(6, 2)) + "</td> \n";
                            }
                            else if (dt_select.Columns[j].ColumnName == "異常")//<a href="#">
                            {
                                if (dt_select.Rows[i][j].ToString() != "") //  
                                {
                                    SubError = "";
                                    ErrorStr = DataTableUtils.toString(dt_select.Rows[i][j]).Split(',');
                                    for (int k = 1; k < ErrorStr.Length - 2; k++)
                                        SubError += " " + ErrorStr[k];

                                    string s1 = DataTableUtils.toString(dt_select.Rows[i]["排程編號"]);
                                    string s2 = dt.Rows[0]["工作站編號"].ToString();
                                    string s3 = LineName;
                                    string s4 = ErrorStr[0];
                                    string s6 = SubError;
                                    string Error1 = "";
                                    string Error2 = "";
                                    if (ErrorStr.Length > 3)
                                    {
                                        Error1 = ErrorStr[ErrorStr.Length - 2];
                                        Error2 = ErrorStr[ErrorStr.Length - 1];
                                    }
                                    /*
                                    string s5 = ErrorStr[ErrorStr.Length - 2];
                                    string s7 = ErrorStr[ErrorStr.Length - 1];*/
                                    // content
                                    string url = "ErrorID=" + DataTableUtils.toString(dt_select.Rows[i]["排程編號"]) + "," + "ErrorLineNum=" + dt.Rows[0]["工作站編號"].ToString() + "," + "ErrorLineName=" + LineName;
                                    td += "<td style='text-align:left;width:55%'><a href='Asm_ErrorDetail.aspx?key=" + WebUtils.UrlStringEncode(url) + "'>"
                                           + "<span style='font-size:10px; text-align:left;'> " + ErrorStr[0] + "<br></span>"
                                           + "<span style='color:red; text-align:center;'>" + SubError + "<br></span>"
                                           + "<span style='font-size:10px ;text-align:right;color:gray;'> " + Error1 + " " + Error2 + " <br ></ span >"
                                           + "</a></td> \n"; // type(UP) ,  ErrorStr (Center), yyyy/MM/dd HH:mm:SS(down):
                                }
                                else
                                {
                                    string url = "ErrorID=" + DataTableUtils.toString(dt_select.Rows[i]["排程編號"]) + "," + "ErrorLineNum=" + dt.Rows[0]["工作站編號"].ToString() + "," + "ErrorLineName=" + LineName;
                                    td += "<td style='text-align:center;width:55%'><u><a href='Asm_ErrorDetail.aspx?key=" + WebUtils.UrlStringEncode(url) + "'>" + "編輯" + "</a></u></td> \n";
                                }
                            }
                            else if (dt_select.Columns[j].ColumnName == "排程編號")
                            {

                                //Product_Detail 
                                //td += "<td style='text-align:center;'>" + "<u><a href='Asm_Cahrt_Detail.aspx?Key=Product_Detail" + "," + "LineNum=" + LineName + "," + "Value=" + DataTableUtils.toString(dt_select.Rows[i]["排程編號"]) + "'" + "'" + ">" + DataTableUtils.toString(dt_select.Rows[i][j]) + "</a></u></td> \n";
                                if (dt.Rows[i]["狀態"].ToString() != "未動工")
                                {
                                    if (GetPredictionTimeStatus(dt_select.Rows[i]["排程編號"].ToString(), ref PredictionProgress))
                                        PredictionTimeStatus = "<i class='fa fa-clock-o' style='color:green;width:15%'></i>";
                                    else
                                        PredictionTimeStatus = "<i class='fa fa-clock-o'  style='color:red;width:15%'></i>";
                                }
                                else
                                    PredictionTimeStatus = "<i class='fa fa-clock-o'  style='color:black;width:15%'></i>";
                                //LayOut
                                /*20200221修改這裡*/
                                if (judge == "")
                                {
                                    string url = "Key=Product_Detail" + "," + "LineNum=" + LineName + "," + "Value=" + DataTableUtils.toString(dt_select.Rows[i]["排程編號"]);
                                    td += "<td style='text-align:left;'>" + "<u><a href='Asm_Cahrt_Detail.aspx?key=" + WebUtils.UrlStringEncode(url) + "'>" + PredictionTimeStatus + "</a></u>" + " " + DataTableUtils.toString(dt_select.Rows[i][j]) + "</td> \n";
                                }
                                else
                                {
                                    string url = "Number=" + DataTableUtils.toString(dt_select.Rows[i][j]);
                                    string url2 = "Key=Product_Detail" + "," + "LineNum=" + LineName + "," + "Value=" + DataTableUtils.toString(dt_select.Rows[i]["排程編號"]);
                                    td += "<td style='text-align:left;'>" + "<u><a href='Asm_Cahrt_Detail.aspx?key=" + WebUtils.UrlStringEncode(url2) + "'>" + PredictionTimeStatus + "</a></u>" + " " + "<a href='Asm_LineOverView.aspx?key=" + WebUtils.UrlStringEncode(url) + "' target='_blank' >" + DataTableUtils.toString(dt_select.Rows[i][j]) + "</a></td> \n";

                                }

                                /*20200221修改這裡*/

                            }
                            else
                                td += "<td style='text-align:center;width:10%'>" + DataTableUtils.toString(dt_select.Rows[i][j]) + "</td> \n";
                        }
                        td += "</tr> \n";
                    }
                    str[6] = td;
                    return str;
                }
                else
                    return str;
            }
            else
            {
                str[6] = " no data";
                return str;
            }
        }
        /*20200221修改這裡*/
        public string[] GetData(string number, string Acc)
        {
            string[] str = new string[7] { "0", "0", "0", "0", "0", "0", "0" };//0:all   1:finsh   2:Stop  3:all   4:td_finish   5:td_Stop  7:Data
            string td = "";
            string[] ErrorStr;
            string SubError = "";
            string Condition = "";
            string Condition1 = "";
            string Condition2 = "";
            DataTableUtils.Conn_String = GetConnByDekVisTmp;

            Condition1 = "排程編號 = " + "'" + number + "'" + " AND " + "實際組裝時間 =" + "'" + DateTime.Now.ToString("yyyyMMdd").ToString() + "'";
            Condition2 = "排程編號 = " + "'" + number + "'" + " AND " + "實際組裝時間 <=" + "'" + DateTime.Now.ToString("yyyyMMdd").ToString() + "'";
            Condition = Condition1 + " OR " + Condition2 + " order by " + "組裝日" + "," + "組裝編號";
            DataTable dt = null;
            //int UserLevel = GetACCLevel(Acc);
            try
            {
                dt = DataTableUtils.DataTable_GetTable(ShareMemory.SQLAsm_WorkStation_State, Condition);
            }
            catch
            {
                GetData(number, Acc);
            }


            if (dt.Rows.Count != 0)
            {
                DataTable dt_select = tableColumnSelectForLineDetail(dt, number.ToString(), ",工作站型態資料表.工作站名稱  ", " INNER JOIN 工作站型態資料表 ON 工作站狀態資料表.工作站編號 = 工作站型態資料表.工作站編號 ");
                str = GetEachPiece(dt);
                //Columns --目前固定的
                //Rows
                if (dt_select.Rows.Count != 0)
                {
                    for (int i = 0; i < dt_select.Rows.Count; i++)
                    {
                        td += "<tr class='gradeX'> \n";
                        for (int j = 0; j < dt_select.Columns.Count; j++)
                        {
                            if (dt_select.Columns[j].ColumnName == "狀態")
                            {
                                //20191125 加上style='width:?%' 以維持資料表單欄位寬度
                                // style="text-align:center;"
                                if (dt.Rows[i]["狀態"].ToString() == "暫停")
                                    td += "<td style='color: red;text-align:center;width:10%'> " + dt.Rows[i]["進度"].ToString() + "%" + " </td> \n";
                                else if (dt.Rows[i]["狀態"].ToString() == "完成")
                                    td += "<td style='color: green;text-align:center;width:10%'> " + dt.Rows[i]["進度"].ToString() + "%" + " </td> \n";
                                else if (dt.Rows[i]["狀態"].ToString() == "啟動")
                                    td += "<td style='color: blue;text-align:center;width:10%'> " + dt.Rows[i]["進度"].ToString() + "%" + " </td> \n";
                                else
                                    td += "<td style='color:black;text-align:center;width:10%'> " + dt.Rows[i]["進度"].ToString() + "%" + " </td> \n";

                            }
                            else if (dt_select.Columns[j].ColumnName == "進度")
                            {
                                //td += "<td style='color: black;text-align:center;'> " + DataTableUtils.toString(dt_select.Rows[i][j]) + "%" + " </td> \n";
                            }
                            else if (dt_select.Columns[j].ColumnName == "組裝日")
                            {
                                td += "<td style='text-align:center;width:10%'>" + DataTableUtils.toString(dt_select.Rows[i][j].ToString().Substring(4, 2)) + "/" + DataTableUtils.toString(dt_select.Rows[i][j].ToString().Substring(6, 2)) + "</td> \n";
                            }
                            else if (dt_select.Columns[j].ColumnName == "異常")//<a href="#">
                            {
                                if (dt_select.Rows[i][j].ToString() != "") //  
                                {
                                    SubError = "";
                                    ErrorStr = DataTableUtils.toString(dt_select.Rows[i][j]).Split(',');
                                    for (int k = 1; k < ErrorStr.Length - 2; k++)
                                        SubError += " " + ErrorStr[k];

                                    string Error1 = "";
                                    string Error2 = "";
                                    if (ErrorStr.Length > 3)
                                    {
                                        Error1 = ErrorStr[ErrorStr.Length - 2];
                                        Error2 = ErrorStr[ErrorStr.Length - 1];
                                    }
                                    /*
                                    string s5 = ErrorStr[ErrorStr.Length - 2];
                                    string s7 = ErrorStr[ErrorStr.Length - 1];*/
                                    // content
                                    td += "<td style='text-align:left;width:55%'>"
                                           + "<span style='font-size:10px; text-align:left;'> " + ErrorStr[0] + "<br></span>"
                                           + "<span style='color:red; text-align:center;'>" + SubError + "<br></span>"
                                           + "<span style='font-size:10px ;text-align:right;color:gray;'> " + Error1 + " " + Error2 + " <br ></ span >"
                                           + "</td> \n"; // type(UP) ,  ErrorStr (Center), yyyy/MM/dd HH:mm:SS(down):
                                }
                                else
                                    td += "<td style='text-align:center;width:55%'><u>" + "" + "</a></u></td> \n";
                            }
                            else if (dt_select.Columns[j].ColumnName == "排程編號")
                            {
                                //LayOut
                                /*20200221修改這裡*/
                                td += "<td style='text-align:center;width:20%'>" + " " + DataTableUtils.toString(dt_select.Rows[i][j]) + "</td> \n";
                                /*20200221修改這裡*/
                            }
                            else
                                td += "<td style='text-align:center;width:10%'>" + DataTableUtils.toString(dt_select.Rows[i][j]) + "</td> \n";
                        }
                        td += "</tr> \n";
                    }
                    str[6] = td;
                    return str;
                }
                else
                    return str;
            }
            else
            {
                str[6] = " no data";
                return str;
            }
        }
        /*20200221修改這裡*/ // 有包TRY CATCH
        public bool GetRW(string _acc)
        {
            bool Write = false;
            clsDB_Switch.dbOpen(GetConnByDekVisErp);
            DataTableUtils.Conn_String = GetConnByDekVisErp;
            if (clsDB_Switch.IsConnected == true)
            {
                DataRow dr_rw = null;
                try
                {
                    dr_rw = DataTableUtils.DataTable_GetDataRow("select FUNC_YN from  SYSTEM_PMR where USER_ACC=" + "'" + _acc + "'");
                }
                catch
                {
                    GetRW(_acc);
                }


                if (dr_rw != null && dr_rw[0].ToString().ToUpper() == "Y")
                {
                    Write = true;
                    //back
                    clsDB_Switch.dbOpen(GetConnByDekVisTmp);
                    DataTableUtils.Conn_String = GetConnByDekVisTmp;
                }
            }
            else
                DataTableUtils.Conn_String = GetConnByDekVisTmp;
            return Write;
        }
        //有包TRY CATCH
        public DataRow GetAccInf(string _acc)
        {
            DataRow dr_rw = null;
            clsDB_Switch.dbOpen(GetConnByDekVisErp);
            DataTableUtils.Conn_String = GetConnByDekVisErp;
            if (clsDB_Switch.IsConnected == true)
            {
                try
                {
                    dr_rw = DataTableUtils.DataTable_GetDataRow("select * from  USERS where USER_ACC=" + "'" + _acc + "'");
                }
                catch
                {
                    GetAccInf(_acc);
                }


                clsDB_Switch.dbOpen(GetConnByDekVisTmp);
                DataTableUtils.Conn_String = GetConnByDekVisTmp;
            }
            else
                DataTableUtils.Conn_String = GetConnByDekVisTmp;
            return dr_rw;
        }
        public List<string> Getdepartment(departmentSelect _Select, ref string _acc)
        {
            List<string> dep = new List<string>();
            string condition = " where USER_ACC = " + "'" + _acc + "'";
            clsDB_Switch.dbOpen(GetConnByDekVisErp);
            DataTableUtils.Conn_String = GetConnByDekVisErp;
            if (clsDB_Switch.IsConnected == true)
            {
                DataRow dr_dep = DataTableUtils.DataTable_GetDataRow("select USER_ACC,USER_DPM,DEPARTMENT.DPM_NAME2 from USERS  INNER JOIN DEPARTMENT ON USERS.USER_DPM = DEPARTMENT.DPM_NAME" + condition);
                if (_Select == departmentSelect.個人)
                {
                    if (dr_dep != null)
                        dep.Add(dr_dep["DPM_NAME2"].ToString());
                }
                else
                {
                    DataTable dt_dep = DataTableUtils.DataTable_GetTable("select DPM_NAME2 from DEPARTMENT", 0, 0);
                    if (dt_dep != null)
                    {
                        foreach (DataRow dr in dt_dep.Rows)
                        {
                            if (dr["DPM_NAME2"].ToString() != "德科" && dr["DPM_NAME2"].ToString() != "系統")
                                dep.Add(dr["DPM_NAME2"].ToString());
                        }
                        //dep.Add("採購部");
                    }

                    if (dr_dep != null)
                        _acc = dr_dep["DPM_NAME2"].ToString();
                    else
                        _acc = dep[0];
                }
                clsDB_Switch.dbOpen(GetConnByDekVisTmp);
                DataTableUtils.Conn_String = GetConnByDekVisTmp;
            }
            else
                DataTableUtils.Conn_String = GetConnByDekVisTmp;
            return dep;
        }
        public List<string> GetErrorProcessStatus()
        {
            List<string> ErrorStatus = new List<string>();
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            DataTable dt_ErrorStatus = null;
            try
            {
                dt_ErrorStatus = DataTableUtils.DataTable_GetTable("select 狀態名稱  from " + ShareMemory.SQLAsm_WorkStation_ErrorProcessStatus, 0, 0);
            }
            catch
            {
                GetErrorProcessStatus();
            }
            if (dt_ErrorStatus != null)
            {
                foreach (DataRow dr in dt_ErrorStatus.Rows)
                    ErrorStatus.Add(dr["狀態名稱"].ToString());
            }
            return ErrorStatus;
        }
        public List<string> GetErrorType(string key, string LineNum)
        {
            string Condition = "";
            List<string> Errors = new List<string>();
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            //List<ErrorType> Errors = new List<ErrorType>();//special Math
            if (!GetConnByDekVisTmp.Contains("Hor"))
                Condition = "排程編號=" + "'" + key + "'";
            else
                Condition = "排程編號=" + "'" + key + "'" + " AND " + "工作站編號=" + "'" + LineNum + "'";

            if (key == null)
            {

                DataTable dt_Error = null;
                try
                {
                    dt_Error = DataTableUtils.DataTable_GetTable("select 備註編號,備註內容 from " + ShareMemory.SQLAsm_WorkStation_Note + " where  備註型態 = " + "'" + "異常" + "'", 0, 0);
                }
                catch
                {
                    GetErrorType(key, LineNum);
                }
                if (dt_Error != null)
                {
                    foreach (DataRow dr in dt_Error.Rows)
                        Errors.Add(dr["備註內容"].ToString());
                    //Errors.Add(new ErrorType() { ErrorId = DataTableUtils.toInt(dr["備註編號"].ToString()), ErrorName = dr["備註內容"].ToString() });
                }
            }
            else
            {
                //List<string> Errors_mant = new List<string>();
                DataTable dt_Error = null;

                try
                {
                    dt_Error = DataTableUtils.DataTable_GetTable("select 異常維護編號,異常原因類型 from " + ShareMemory.SQLAsm_WorkStation_ErrorMant + " where " + Condition, 0, 0);
                }
                catch
                {
                    GetErrorType(key, LineNum);
                }

                //DataTable dt_Error = DataTableUtils.DataTable_GetTable("select 異常維護編號,異常原因類型 from " + ShareMemory.SQLAsm_WorkStation_ErrorMant,Condition, 0, 0);
                if (dt_Error != null)
                {
                    foreach (DataRow dr in dt_Error.Rows)
                    {
                        if (!Errors.Contains(dr["異常原因類型"].ToString()))
                            Errors.Add(dr["異常原因類型"].ToString());
                    }
                }

            }
            return Errors;
        }
        public int GetSeriesNum(string tableName, int ColumnIndex)
        {
            int Count = 1;
            DataTableUtils.Conn_String = GetConnByDekVisTmp;

            DataTable dr_hear = null;
            DataTable dt = null;
            string field_name = "";
            try
            {
                dr_hear = DataTableUtils.DataTable_GetRowHeader(tableName);
                field_name = DataTableUtils.toString(dr_hear.Columns[ColumnIndex]);
                dt = DataTableUtils.DataTable_GetTable("select " + dr_hear.Columns[ColumnIndex] + " from " + tableName + " order by " + dr_hear.Columns[ColumnIndex] + " desc");


            }
            catch
            {
                GetSeriesNum(tableName, ColumnIndex);
            }

            if (dt != null)
            {
                Count = DataTableUtils.toInt(DataTableUtils.toString(dt.Rows[0][field_name])) + 1;
                return Count;
            }

            return dt.Rows.Count + 1;
        }
        public Dictionary<string, int> GetWorkPointInf(string LineNum = null)
        {
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            Dictionary<string, int> WorkStationInf_List = new Dictionary<string, int>();
            DataTable dt;
            if (LineNum == null)
                dt = DataTableUtils.DataTable_GetTable("select 工作站名稱,工作站編號 from  " + ShareMemory.SQLAsm_WorkStation_Type);
            else
                dt = DataTableUtils.DataTable_GetTable(ShareMemory.SQLAsm_WorkStation_Type, "工作站編號=" + LineNum, 0, 0);
            foreach (DataRow dr in dt.Rows)
            {
                if (!WorkStationInf_List.ContainsKey(dr["工作站名稱"].ToString()))
                    WorkStationInf_List.Add(dr["工作站名稱"].ToString(), DataTableUtils.toInt(dr["工作站編號"].ToString()));//name,ID
            }
            return WorkStationInf_List;
        }
        public int GetTagetPiece(string TimeType, int LineNumber, string startTime, string endTime, string WhoSet)
        {
            int SubTagetPiece = 0;
            string Condition = "";
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            DataTable dt;
            if (WhoSet == "Set" || TimeType == null)
            {
                Condition = "工作站編號 = " + "'" + LineNumber + "'";
                dt = DataTableUtils.DataTable_GetTable(ShareMemory.SQLAsm_WorkStation_Type, Condition);
                if (dt.Rows.Count != 0)
                    SubTagetPiece = DataTableUtils.toInt(dt.Rows[0]["目標件數"].ToString());
            }
            else if (TimeType == "week" || TimeType == "month" || TimeType == "define") // 實際組裝時間
            {
                Condition = "工作站編號 = " + "'" + LineNumber + "'" + " AND " + "實際組裝時間>=" + "'" + startTime + "'" + " AND " + "實際組裝時間<=" + "'" + endTime + "'";
                dt = DataTableUtils.DataTable_GetTable(ShareMemory.SQLAsm_WorkStation_State, Condition);
                SubTagetPiece = dt.Rows.Count;
            }
            else
            {
                Condition = "工作站編號 = " + "'" + LineNumber + "'" + " AND " + "實際組裝時間>=" + "'" + startTime + "'" + " AND " + "實際組裝時間<=" + "'" + endTime + "'";
                dt = DataTableUtils.DataTable_GetTable(ShareMemory.SQLAsm_WorkStation_State, Condition);
                SubTagetPiece = dt.Rows.Count;
            }
            return SubTagetPiece;
        }
        public int GetRealPiece(int LineNumber, string StartDate = "Today", string EndDate = "Today")
        {
            int SubTagetPiece = 0;
            string Condition = "";
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            if (EndDate == "Today")// not Input
                Condition = "工作站編號 = " + "'" + LineNumber + "'" + " AND " + "實際完成時間 <" + "'" + DateTime.Now.ToString("yyyyMMddhhmmss").ToString() + "'" + " AND " + "實際完成時間 >" + "'" + DateTime.Now.ToString("yyyyMMdd").ToString() + "010101" + "'";
            else
                Condition = "工作站編號 = " + "'" + LineNumber + "'" + " AND " + "實際完成時間 <" + "'" + EndDate + "'" + " AND " + "實際完成時間 >" + "'" + StartDate + "'";
            DataTable dt = DataTableUtils.DataTable_GetTable(ShareMemory.SQLAsm_WorkStation_State, Condition);
            if (dt.Rows.Count != 0)
                SubTagetPiece = dt.Rows.Count;
            return SubTagetPiece;
        }
        public int GetOnTagetPiece(string TimeType, int LineNumber, string startTime, string endTime, ref DataTable dt)
        {
            int SubOnTagetPiece = 0;
            // dt.Clear();
            string Condition = "工作站編號 = " + "'" + LineNumber + "'" + " AND " + "實際組裝時間>=" + "'" + startTime + "'" + " AND " + "實際組裝時間<=" + "'" + endTime + "'" + " AND " + "狀態=" + "'" + "完成" + "'";
            DataTable dt_sub = DataTableUtils.DataTable_GetTable(ShareMemory.SQLAsm_WorkStation_State, Condition);
            SubOnTagetPiece = CountOnTaget(dt_sub);
            dt.Merge(dt_sub, false);
            return SubOnTagetPiece;
        }
        public string[] GetTimeType(string Str)
        {
            string[] time = new string[7];
            if (Str == "day")
            {
                time[0] = DateTime.Now.ToString("yyyyMMdd").ToString() + "010101";
                time[1] = DateTime.Now.ToString("yyyyMMdd").ToString() + "235959";
                time[3] = "HH:mm";
                // time[4] = "產線狀態 " + "(" + "今日" + ")";
                //time[4] = "(" + "本日" + ")";
                time[4] = "(" + DateTime.Now.ToString("yyyy-MM-dd").ToString() + ")";
                //time[4] = "產線狀態 " + "(" + DateTime.Now.ToString("yyyy/MM/dd").ToString() + ")";
                time[5] = "1";
                time[6] = "hour";
            }
            else if (Str == "week")
            {
                time[0] = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + 1).ToString("yyyyMMdd");
                time[1] = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + 5).ToString("yyyyMMdd");
                time[3] = "DD MM YYYY";
                //time[4] = "產線狀態 " + "( 一周)";
                //time[4] = "( 一周)";
                time[4] = "(" + DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + 1).ToString("MM/dd") + "-" + DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + 5).ToString("MM/dd") + ")";
                time[5] = "1";
                time[6] = "day";
                //time[0] = DateTime.Now.AddDays(-9).ToString("yyyyMMddmmhhss").ToString();
                //time[1] = DateTime.Now.ToString("yyyyMMddmmhhss").ToString();
            }
            else if (Str == "month")
            {
                time[0] = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).ToString("yyyyMMdd");
                time[1] = new DateTime(DateTime.Now.AddMonths(1).Year, DateTime.Now.AddMonths(1).Month, 1).AddDays(-1).ToString("yyyyMMdd");
                time[3] = "DD";
                //time[4] = "產線狀態 " + "(" + DateTime.Now.ToString("yyyy/MM").ToString() + ")";
                //time[4] = "產線狀態 " + "(" + "本月" + ")";
                //time[4] = "(" + "本月" + ")";
                time[4] = "(" + new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).ToString("yyyy年MM月") + ")";
                time[5] = "1";
                time[6] = "day";
                //time[0] = DateTime.Now.AddMonths(-1).ToString("yyyyMMddmmhhss").ToString();
                //time[1] = DateTime.Now.ToString("yyyyMMddmmhhss").ToString();
            }
            else if (Str == "season")
            {
                time[0] = DateTime.Now.AddMonths(-3).ToString("yyyyMMdd").ToString();
                time[1] = DateTime.Now.ToString("yyyyMMdd").ToString();
                time[3] = "MMM";
                time[4] = "產線狀態 " + "(本季)";
                time[5] = "1";
                time[6] = "month";
            }
            else if (Str == "fyear")
            {
                time[0] = DateTime.Now.ToString("yyyy0101");
                time[1] = DateTime.Now.ToString("yyyy0630");
                time[3] = "MMM";
                //time[4] = "產線狀態 " + "(前半年度)";
                time[4] = "(1-6月)";
                time[5] = "1";
                time[6] = "month";
                //time[0] = DateTime.Now.AddMonths(-6).ToString("yyyyMMddmmhhss").ToString();
                //time[1] = DateTime.Now.ToString("yyyyMMddmmhhss").ToString();
            }
            else if (Str == "byear")
            {
                time[0] = DateTime.Now.ToString("yyyy0701");
                time[1] = DateTime.Now.ToString("yyyy1231");
                time[3] = "MMM";
                //time[4] = "產線狀態 " + "(後半年度)";
                time[4] = "(7-12月)";
                time[5] = "1";
                time[6] = "month";
                //time[0] = DateTime.Now.AddMonths(-6).ToString("yyyyMMddmmhhss").ToString();
                //time[1] = DateTime.Now.ToString("yyyyMMddmmhhss").ToString();
            }
            else if (Str == "year")
            {
                time[0] = DateTime.Now.ToString("yyyy0101");
                time[1] = DateTime.Now.ToString("yyyy1231");
                time[3] = "MMM YYYY";
                // time[4] = "產線狀態 " + "(全年度)";
                // time[4] = "(全年度)";
                time[4] = DateTime.Now.ToString("yyyy") + "年";
                time[5] = "1";
                time[6] = "month";
                // time[0] = DateTime.Now.AddYears(-1).ToString("yyyyMMddmmhhss").ToString();
                // time[1] = DateTime.Now.ToString("yyyyMMddmmhhss").ToString();
            }
            else
            {
                time[0] = DateTime.Now.ToString("yyyyMMdd").ToString() + "010101";
                time[1] = DateTime.Now.ToString("yyyyMMdd").ToString() + "235959";
                time[3] = "hh:mm";
                //time[4] = "產線狀態 " + "(" + DateTime.Now.ToString("yyyy/MM/dd").ToString() + ")";
                time[4] = "(" + DateTime.Now.ToString("yyyy-MM-dd").ToString() + ")";
            }
            time[2] = Str;
            return time;
        }
        private List<string> TrsDateList(string TimeType, string StartDay = "Today", string EndDay = "Today")
        {
            TimeSpan ts;
            List<string> date = new List<string>();
            // day
            if (TimeType == "day")
            {
                //for (int i = 0; i < 24; i++)
                //    date.Add(StartDay.Substring(0, 8) + i.ToString().PadLeft(2, '0'));
                date.Add(StartDay);
                return date;
            }
            // other
            var today = DateTime.ParseExact(StartDay, "yyyyMMdd", System.Globalization.CultureInfo.CurrentCulture);
            var someday = DateTime.ParseExact(EndDay, "yyyyMMdd", System.Globalization.CultureInfo.CurrentCulture);
            ts = someday - today;
            if (TimeType == "week" || TimeType == "month" || (TimeType == "define" && ts.TotalDays < 30))
            {
                foreach (var day in DateTransfor.EachDay(today, someday))//string.Format("{0:yyyyMMdd}", dt);　
                    date.Add(string.Format("{0:yyyyMMdd}", day));
            }
            else //month,season ,fhalf-year ,bhalf-year, year (unit :month)
            {
                foreach (var day in DateTransfor.EachMonthTo(today, someday))//month　
                    date.Add(string.Format("{0:yyyyMMdd}", day));
            }
            return date;
        }
        public object GetLineList()
        {
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            string condition = " where 工作站是否使用中='1'";
            //string condition = "";
            //string condition = "";
            DataTable dt_line = DataTableUtils.DataTable_GetTable("select 工作站編號,工作站名稱 from " + ShareMemory.SQLAsm_WorkStation_Type + condition, 0, 0);
            List<LineData> Lines = new List<LineData>();//special Math
            if (dt_line != null)
            {
                foreach (DataRow dr in dt_line.Rows)
                    Lines.Add(new LineData() { LineId = DataTableUtils.toInt(dr["工作站編號"].ToString()), LineName = dr["工作站名稱"].ToString() });
            }
            return Lines;
        }
        public string GetColumnName(string PageName)
        {
            string ColumnName = "";
            string[] muilt;
            //string[] Colweight;
            switch (PageName)
            {
                case "Asm_LineTotalView":
                    muilt = new string[5] { "產線名稱", "產能", "在線", "完成", "異常" };
                    break;
                case "Asm_LineOverView":
                    muilt = new string[5] { "上線日", "客戶", "編號", "進度", "備註" };
                    break;
                /*20200221修改這裡*/
                case "Asm_NumView":
                    muilt = new string[6] { "上線日", "工作站名稱", "客戶", "編號", "進度", "備註" };
                    break;
                /*20200221修改這裡*/
                case "Asm_ErrorSearch":
                    muilt = new string[4] { "編號", "排程編號", "站名", "原因" };
                    //muilt = new string[5] { "時間", "人員", "類型", "內容", "圖片" };
                    break;
                case "Asm_ErrorDetail":
                    //muilt = new string[5] { "時間", "人員", "類型", "內容", "圖片" };
                    //muilt = new string[4] { "編號", "人員", "單位", "內容" };
                    muilt = new string[4] { "人員", "單位", "內容", "圖片" };
                    break;
                case "ErrorChat":
                    muilt = new string[4] { "排程編號", "起始時間", "排除時間", "處理時間" };
                    break;
                case "Product_Detail":
                    muilt = new string[4] { "工藝時間", "起始時間", "完成時間", "預計完成" };
                    break;
                case "Asm_history":
                    muilt = new string[5] { "排程編號", "產線名稱", "起始時間", "完成時間", "組裝時間[分]" };
                    break;
                default:
                    muilt = new string[5] { "產線編號", "產線名稱", "排程產能", "實際產量", "達成率(%)" };
                    break;
            }

            //    muilt = new string[5] { "產線編號", "產線名稱", "排程產能", "實際產量", "達成率(%)" };
            //    Colweight = new string[5] { "10", "30", "20", "20", "20" };
            //ColumnName = "<tr class= 'column' style='text-align:center;background-color:dimgray;color: beige;' >\n";
            ColumnName = " <tr id=\"tr_row\">\n";
            // ColumnName+= "<th>\n";
            if (PageName == "Asm_ErrorDetail")
            {
                //ColumnName += "<th>\n";
                ColumnName += " <th><input type='checkbox' id='check - all' class='flat'></th> \n";
                //ColumnName += "</th>\n";
            }
            // ColumnName += "</th>\n";
            for (int i = 0; i < muilt.Length; i++)
                ColumnName += "<th style='text-align:center;'>" + muilt[i] + "</th>\n";
            ColumnName += "</tr>";
            return ColumnName;
        }
        public Dictionary<string, string> AnsQueryStringChart(string QueryString)
        {
            string[] Qstr;
            string[] QSubStr;
            Dictionary<string, string> dc_PraStr = new Dictionary<string, string>();
            if (QueryString != null && QueryString != "")
            {
                Qstr = QueryString.Split(',');
                dc_PraStr.Add("Key", Qstr[0]); // First  ?AA = 1
                if (Qstr.Length > 1)
                {
                    foreach (string Str in Qstr)
                    {
                        QSubStr = Str.Split('=');
                        if (QSubStr.Length > 1)
                            dc_PraStr.Add(QSubStr[0], QSubStr[1]);
                    }
                }
                return dc_PraStr;
            }
            else
                return dc_PraStr;
        }
        public string[] GetChartColumnName(string PageName, string TableFormat)
        {
            string[] ColumnName = new string[2] { " ", " " };
            string[] muilt;
            //string[] Colweight;
            switch (PageName)
            {
                case "ErrorChat":
                    muilt = new string[5] { "排程編號", "起始時間", "排除時間", "處理時間", "異常歷程" };
                    //ColumnName[1] = "dt-responsive nowrap";
                    break;
                case "ErrorChatDetail":
                    muilt = new string[4] { "維護人員", "處理單位", "異常內容", "處理狀態" };
                    //muilt = new string[5] { "時間", "人員", "類型", "內容", "圖片" };
                    break;
                case "Product_Detail":
                    muilt = new string[9] { "工藝名稱", "組裝人員", "標準工時", "組裝累積", "異常累積", "實際|預估", "啟動時間", "預估完成", "實際完成" };
                    ColumnName[1] = "dt-responsive nowrap";
                    break;
                //case "Product_Det1ail":
                //    muilt = new string[9] { "工藝名稱", "組裝人員", "標準工時", "組裝累積", "異常累積", "實際|預估", "啟動時間", "預估完成", "實際完成" };
                //    ColumnName[1] = "dt-responsive nowrap";
                //    break;
                case "ErrorSearch_Detail":
                    muilt = new string[4] { "維護人員", "處理單位", "異常內容", "處理狀態" };
                    //muilt = new string[5] { "維護人員", "處理單位", "異常內容", "處理'狀態", "累積時間" };
                    //ColumnName[1] = "dt-responsive nowrap";
                    break;
                case "Asm_LineOverView_FinishSpecialFunction":
                    muilt = new string[4] { "客戶", "排程編號", "送貨日期", "送貨時段" };
                    //muilt = new string[5] { "維護人員", "處理單位", "異常內容", "處理'狀態", "累積時間" };
                    //ColumnName[1] = "dt-responsive nowrap";
                    break;
                default:
                    muilt = new string[5] { "產線編號", "產線名稱", "排程產能", "實際產量", "達成率(%)" };
                    break;
            }
            ColumnName[0] = "<tr id=\"tr_row\">\n";
            for (int i = 0; i < muilt.Length; i++)
                ColumnName[0] += "<th style='text-align:center;'>" + muilt[i] + "</th>\n";
            ColumnName[0] += "</tr>";
            return ColumnName;
        }
        public string GetCharstColumnName_Error(string SelectLine, DropDownList ColumnNameList, string PageName)
        {
            string ColumnName = "";
            string FirstTitle = "";
            if (PageName == "Asm_Cahrt_Error")
                FirstTitle = "錯誤類型";
            else if (PageName == "Asm_Compliance_rate")
                FirstTitle = "時間列表";
            else
                FirstTitle = "未定義";
            ColumnName = "";
            ColumnName = "<tr class= 'column' style='text-align:center;background-color:dimgray;color: beige;' >\n";
            if (SelectLine == "0")
            {
                ColumnName += "<th style='text-align:center;'>" + FirstTitle + "</th>\n";
                foreach (ListItem Name in ColumnNameList.Items)
                    ColumnName += "<th style='text-align:center;'>" + Name.Text + "</th>\n";
            }
            ColumnName += "</tr>";
            return ColumnName;
        }
        public string CheckConnectSting(List<string> ErrorInf)
        {
            //先判斷有無字串[有字串表示來自於VIS網頁,無字串表示來自於Line Error直接連結]
            //無字串 給Vec 字串測試
            if (!string.IsNullOrEmpty(GetConnByDekVisTmp))
                return GetConnectStrFromWorkStation(ErrorInf);
            else
            {
                GetConnByDekVisTmp = GetConnByDekdekVisAssm;
                return GetConnectStrFromWorkStation(ErrorInf);
            }
        }
        private string GetConnectStrFromWorkStation(List<string> StationINf)
        {
            //先判斷 是不是 vec
            //在判斷 是不是 hor
            //Vec(hor) 有值 表示現在是 Vec(hor) 且回傳是Vec類error
            //Vec(hor) 無值 表示現在是 Vec(hor) 類error
            string condition = ShareMemory.WorkStationName + "=" + "'" + StationINf[2].ToString() + "'" + "AND " + ShareMemory.WorkStationNum + "=" + "'" + StationINf[1].ToString() + "'";
            if (GetConnByDekVisTmp.Contains("dekVisAssm"))//Vec
            {
                if (DataTableUtils.RowCount(ShareMemory.SQLAsm_WorkStation_Type, condition) == 0)
                    GetConnByDekVisTmp = GetConnByDekdekVisAssmHor;
            }
            else //Hor
            {
                if (DataTableUtils.RowCount(ShareMemory.SQLAsm_WorkStation_Type, condition) == 0)
                    GetConnByDekVisTmp = GetConnByDekdekVisAssm;
            }
            return GetConnByDekVisTmp;
        }
        /*20200221修改這裡*/
        public static string Last_Place(string acc, string factory = "")
        {
            string str = "";
            clsDB_Server clsDB = new clsDB_Server("");
            clsDB.dbOpen(myclass.GetConnByDekVisErp);
            DataTableUtils.Conn_String = myclass.GetConnByDekVisErp;

            string sql_cmd = "select * from users where USER_ACC = '" + acc + "'";
            DataTable dt = clsDB.GetDataTable(sql_cmd);

            if (dt.Rows.Count > 0)
            {
                if (factory == "")
                    str = DataTableUtils.toString(dt.Rows[0]["Last_Model"]);
                else
                {
                    if (dt.Rows.Count > 0)
                    {
                        DataRow row = dt.NewRow();

                        row["Last_Model"] = factory;

                        if (clsDB.Update_DataRow("users", "USER_ACC = '" + acc + "'", row))
                        {
                            str = "";
                        }
                    }
                }
            }

            return str;
        }
        /*20200221修改這裡*/
        //=========================Tool===============================================
        public string TrsDate(string Source)
        {
            string[] date;
            if (Source.Contains('_'))
            {
                date = Source.Split('_');
                return date[1];
            }
            else
                return "month";
        }
        public string TrsTime(string Src, string Unit)
        {
            string TrsTime = "0";
            string tmp = "";
            if (DataTableUtils.toInt(Src) >= 60)
            {
                TimeSpan ts = new TimeSpan(0, 0, DataTableUtils.toInt(Src));
                if (Unit.Contains('m'))
                    TrsTime = (ts.Days * 24 * 60 + ts.Hours * 60 + ts.Minutes).ToString();//Minutes
                else
                {
                    tmp = (DataTableUtils.toDouble(ts.Minutes.ToString()) / 60).ToString();
                    if (tmp.Length >= 3)
                    {
                        tmp = tmp.Remove(0, 1).Substring(0, 2);
                        if (!tmp.Contains('0'))
                            TrsTime = (ts.Days * 24 + ts.Hours).ToString() + tmp; //Minutes
                        else
                            TrsTime = (ts.Days * 24 + ts.Hours).ToString();
                    }
                    else
                        TrsTime = (ts.Days * 24 + ts.Hours).ToString(); //Minutes
                }
            }
            else
            {
                if (Src != "0")
                    TrsTime = "> 1";
            }
            return TrsTime;
        }
        //==========================Chart===============================================
        public string[] SubGetChartInf(string TimeType, string StartDate = "Today", string EndDate = "Today")
        {
            int Taget = 0;
            int Real = 0;
            int count = 0;
            string RateSubStr = "";
            string td = "";
            string[] infStr = new string[4];
            Dictionary<string, int> WorkStationInf_List = new Dictionary<string, int>();
            WorkStationInf_List = GetWorkPointInf();
            //{ x: 10, y: 6, label: "Apple" },
            foreach (KeyValuePair<string, int> LineInf in WorkStationInf_List)
            {
                count++;
                Taget = GetTagetPiece(TimeType, LineInf.Value, StartDate, EndDate, null);
                Real = GetRealPiece(LineInf.Value, StartDate, EndDate);
                //table
                td += "<tr class='gradeX'> \n";
                td += "<td style='text-align:center;'>" + LineInf.Value + "</td> \n";
                td += "<td style='text-align:center;'>" + LineInf.Key + "</td> \n";
                td += "<td style='text-align:center;'>" + Taget + "</td> \n";
                td += "<td style='text-align:center;'>" + Real + "</td> \n";
                //chart
                infStr[0] = "{x:" + (10 * count).ToString() + "," + "y:" + DataTableUtils.toString(Taget) + ", label:" + "'" + LineInf.Key + "'" + "}" + "," + infStr[0];
                infStr[1] = "{x:" + (10 * count).ToString() + "," + "y:" + DataTableUtils.toString(Real) + ", label:" + "'" + LineInf.Key + "'" + "}" + "," + infStr[1];
                if (Taget != 0)
                    RateSubStr = (DataTableUtils.toDouble(Real.ToString()) / DataTableUtils.toDouble(Taget.ToString()) * 100).ToString("F2");
                else
                    RateSubStr = "0";
                td += "<td style='text-align:center;'>" + RateSubStr + "</td> \n";
                infStr[2] = "{x:" + (10 * count).ToString() + "," + "y:" + RateSubStr + ", label:" + "'" + LineInf.Key + "'" + ",indexLabel: " + "'" + RateSubStr + "%" + "'" + "}" + "," + infStr[2];
                td += "</tr> \n";
            }
            infStr[3] = td;
            return infStr;
        }
        public string[] SubGetChartInf(string TimeType, string StartDate = "Today", string EndDate = "Today", string SelectLine = null)
        {
            int Taget = 0;
            int Real = 0;
            string RateSubStr = "";
            string td = "";
            string StartDateDay = "";
            string EndDateDay = "";
            string yearStr = "";
            string MonthStr = "";
            string dayStr = "";
            string hourStr = "";
            string[] infStr = new string[4];
            Dictionary<string, int> WorkStationInf_List = new Dictionary<string, int>();
            List<string> dateList = new List<string>();
            WorkStationInf_List = GetWorkPointInf(SelectLine);
            if (SelectLine != null) //one line
            {
                if (TimeType == "other")
                {
                    return infStr;
                }
                else if (TimeType == "week" || TimeType == "month" || TimeType == "define")
                {
                    StartDateDay = StartDate.Substring(0, 8);
                    EndDateDay = EndDate.Substring(0, 8);
                    foreach (KeyValuePair<string, int> LineInf in WorkStationInf_List)
                    {
                        dateList = TrsDateList(TimeType, StartDateDay, EndDateDay);
                        foreach (string date in dateList)
                        {
                            Taget = GetTagetPiece(TimeType, LineInf.Value, date.ToString(), date.ToString(), null);
                            Real = GetRealPiece(LineInf.Value, date.ToString() + "010101", date.ToString() + "235959");
                            //table
                            td += "<tr class='gradeX'> \n";
                            td += "<td style='text-align:center;'>" + date.ToString() + "</td> \n";
                            td += "<td style='text-align:center;'>" + LineInf.Value + "</td> \n";
                            td += "<td style='text-align:center;'>" + LineInf.Key + "</td> \n";
                            td += "<td style='text-align:center;'>" + Taget + "</td> \n";
                            td += "<td style='text-align:center;'>" + Real + "</td> \n";
                            //chart    { x: new Date(2012, 00, 1), y: 450 },
                            yearStr = date.ToString().Substring(0, 4);
                            //MonthStr = (DataTableUtils.toInt(date.ToString().Substring(4, 2)) ).ToString();
                            MonthStr = (DataTableUtils.toInt(date.ToString().Substring(4, 2)) - 1).ToString();
                            dayStr = date.ToString().Substring(6, 2);
                            infStr[0] = "{x:new Date(" + yearStr + "," + MonthStr + "," + dayStr + ")," + "y:" + DataTableUtils.toString(Taget) + "}" + "," + infStr[0];
                            infStr[1] = "{x:new Date(" + yearStr + "," + MonthStr + "," + dayStr + ")," + "y:" + DataTableUtils.toString(Real) + "}" + "," + infStr[1];
                            if (Taget != 0)
                                RateSubStr = (DataTableUtils.toDouble(Real.ToString()) / DataTableUtils.toDouble(Taget.ToString()) * 100).ToString("F2");
                            else
                                RateSubStr = "0";
                            td += "<td style='text-align:center;'>" + RateSubStr + "</td> \n";
                            infStr[2] = "{x:new Date(" + yearStr + "," + MonthStr + "," + dayStr + ")," + "y:" + RateSubStr + ",indexLabel: " + "'" + RateSubStr + "%" + "'" + "}" + "," + infStr[2];
                            td += "</tr> \n";
                        }
                    }
                    infStr[3] = td;
                    return infStr;
                }
                else if (TimeType == "day")
                {

                    StartDateDay = StartDate.Substring(0, 14);
                    EndDateDay = EndDate.Substring(0, 14);
                    foreach (KeyValuePair<string, int> LineInf in WorkStationInf_List)
                    {
                        dateList = TrsDateList(TimeType, StartDateDay, EndDateDay);
                        foreach (string date in dateList)
                        {
                            Taget = GetTagetPiece(TimeType, LineInf.Value, StartDate, date.ToString(), null);  //待修正   一日的每個小時目標幾個!!
                            Real = GetRealPiece(LineInf.Value, date.ToString().Substring(0, 10) + "0101", date.ToString().Substring(0, 10) + "5959");
                            //table
                            td += "<tr class='gradeX'> \n";
                            td += "<td style='text-align:center;'>" + date.ToString().Substring(8, 2) + ":00" + "</td> \n";
                            td += "<td style='text-align:center;'>" + LineInf.Value + "</td> \n";
                            td += "<td style='text-align:center;'>" + LineInf.Key + "</td> \n";
                            td += "<td style='text-align:center;'>" + Taget + "</td> \n";
                            td += "<td style='text-align:center;'>" + Real + "</td> \n";
                            //chart    { x: new Date(2012, 00, 1), y: 450 },
                            yearStr = date.ToString().Substring(0, 4);
                            //MonthStr = (DataTableUtils.toInt(date.ToString().Substring(4, 2))).ToString();
                            MonthStr = (DataTableUtils.toInt(date.ToString().Substring(4, 2)) - 1).ToString();
                            dayStr = date.ToString().Substring(6, 2);
                            hourStr = date.ToString().Substring(8, 2);
                            infStr[0] = "{x:new Date(" + yearStr + "," + MonthStr + "," + dayStr + "," + hourStr + ")," + "y:" + DataTableUtils.toString(Taget) + "}" + "," + infStr[0];
                            infStr[1] = "{x:new Date(" + yearStr + "," + MonthStr + "," + dayStr + "," + hourStr + ")," + "y:" + DataTableUtils.toString(Real) + "}" + "," + infStr[1];
                            if (Taget != 0)
                                RateSubStr = (DataTableUtils.toDouble(Real.ToString()) / DataTableUtils.toDouble(Taget.ToString()) * 100).ToString("F2");
                            else
                                RateSubStr = "0";
                            td += "<td style='text-align:center;'>" + RateSubStr + "</td> \n";
                            infStr[2] = "{x:new Date(" + yearStr + "," + MonthStr + "," + dayStr + "," + hourStr + ")," + "y:" + RateSubStr + ",indexLabel: " + "'" + RateSubStr + "%" + "'" + "}" + "," + infStr[2];
                            td += "</tr> \n";
                        }
                    }
                    infStr[3] = td;
                    return infStr;
                }
                else //month,season ,fhalf-year ,bhalf-year, year (unit :month)
                {
                    StartDateDay = StartDate.Substring(0, 8);
                    EndDateDay = EndDate.Substring(0, 8);
                    foreach (KeyValuePair<string, int> LineInf in WorkStationInf_List)
                    {
                        dateList = TrsDateList(TimeType, StartDateDay, EndDateDay);
                        foreach (string date in dateList)
                        {
                            Taget = GetTagetPiece(TimeType, LineInf.Value, date.ToString().Substring(0, 6) + "01", date.ToString().Substring(0, 6) + "31", null);
                            Real = GetRealPiece(LineInf.Value, date.ToString().Substring(0, 6) + "01", date.ToString().Substring(0, 6) + "31");
                            //table
                            td += "<tr class='gradeX'> \n";
                            td += "<td style='text-align:center;'>" + date.ToString().Substring(0, 6) + "</td> \n";
                            td += "<td style='text-align:center;'>" + LineInf.Value + "</td> \n";
                            td += "<td style='text-align:center;'>" + LineInf.Key + "</td> \n";
                            td += "<td style='text-align:center;'>" + Taget + "</td> \n";
                            td += "<td style='text-align:center;'>" + Real + "</td> \n";
                            //chart    { x: new Date(2012, 00, 1), y: 450 },
                            yearStr = date.ToString().Substring(0, 4);
                            //MonthStr = (DataTableUtils.toInt(date.ToString().Substring(4, 2))).ToString();
                            MonthStr = (DataTableUtils.toInt(date.ToString().Substring(4, 2)) - 1).ToString();
                            infStr[0] = "{x:new Date(" + yearStr + "," + MonthStr + ")," + "y:" + DataTableUtils.toString(Taget) + "}" + "," + infStr[0];
                            infStr[1] = "{x:new Date(" + yearStr + "," + MonthStr + ")," + "y:" + DataTableUtils.toString(Real) + "}" + "," + infStr[1];
                            if (Taget != 0)
                                RateSubStr = (DataTableUtils.toDouble(Real.ToString()) / DataTableUtils.toDouble(Taget.ToString()) * 100).ToString("F2");
                            else
                                RateSubStr = "0";
                            td += "<td style='text-align:center;'>" + RateSubStr + "</td> \n";
                            infStr[2] = "{x:new Date(" + yearStr + "," + MonthStr + ")," + "y:" + RateSubStr + ",indexLabel: " + "'" + RateSubStr + "%" + "'" + "}" + "," + infStr[2];
                            td += "</tr> \n";
                        }
                    }
                    infStr[3] = td;
                    return infStr;
                }
            }
            else
            {
                infStr[3] = td;
                return infStr;
            }
        }
        public string[] GetErrorInf(DropDownList LineList, string timetype, string TimeType, string StartDate = "Today", string EndDate = "Today", List<string> SelectLine = null)
        {
            //ALL Line
            double ErrorTimeSum = 0;
            string td = "";
            string ChartDataStr_Count = "";
            string ChartDataStr_Time = "";
            string[] infStr = new string[6];////0:ChartDataStr 1:ErrorCount 2:   3:td content:
            string[] ErrorType;
            string condition = "";
            string ViewCondition = "";
            string sortname = "";
            string CountCondition = "";
            int BreakCount = 1;
            int TimeCount = 0;
            Dictionary<string, int> ErrorType_ListD = new Dictionary<string, int>();
            Dictionary<string, double> ErrorTime_ListD = new Dictionary<string, double>();
            List<string> ErrorType_List = new List<string>();
            DataTable dt_er_sort;
            //Line
            if (SelectLine != null && SelectLine[0] != "0")
            {
                for (int i = 0; i < SelectLine.Count; i++)
                {

                    if (i == SelectLine.Count - 1)
                    {
                        if (StartDate == "Today" && EndDate == "Today")
                            condition += "工作站編號=" + SelectLine[i] + " AND  異常起始時間>=" + "'" + DateTime.Now.ToString("yyyyMMdd") + "010101" + "'" + " AND " + "異常起始時間 <= " + "'" + DateTime.Now.ToString("yyyyMMdd") + "235959" + "'";
                        else
                            condition += "工作站編號=" + SelectLine[i] + " AND 異常起始時間>=" + "'" + StartDate + "'" + " AND " + "異常起始時間 <= " + "'" + EndDate + "'";
                    }
                    else
                    {
                        if (StartDate == "Today" && EndDate == "Today")
                            condition += "工作站編號=" + SelectLine[i] + " and 異常起始時間 >=" + "'" + DateTime.Now.ToString("yyyyMMdd") + "010101" + "'" + " AND " + "異常起始時間 <= " + "'" + DateTime.Now.ToString("yyyyMMdd") + "235959" + "' or ";
                        else
                            condition += "工作站編號=" + SelectLine[i] + " and 異常起始時間>=" + "'" + StartDate + "'" + " AND " + "異常起始時間 <= " + "'" + EndDate + "' or ";
                    }
                    if (i == 0)
                    {
                        condition = "Where " + condition;
                    }
                }
            }
            //condition += "工作站編號=" + SelectLine + " AND ";
            else
            {
                if (StartDate == "Today" && EndDate == "Today")
                    condition = "where " + condition + " 異常起始時間>=" + "'" + DateTime.Now.ToString("yyyyMMdd") + "010101" + "'" + " AND " + "異常起始時間 <= " + "'" + DateTime.Now.ToString("yyyyMMdd") + "235959" + "'";
                else
                    condition = "where " + condition + " 異常起始時間>=" + "'" + StartDate + "'" + " AND " + "異常起始時間 <= " + "'" + EndDate + "'";
            }
            // time

            //
            // Get Datatable
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            string aa = "select 工作站編號,排程編號,異常原因,異常累積時間 from " + ShareMemory.SQLAsm_WorkStation_Error + " " + condition;
            DataTable dT_error = DataTableUtils.DataTable_GetTable("select 工作站編號,排程編號,異常原因,異常累積時間 from " + ShareMemory.SQLAsm_WorkStation_Error + " " + condition, 0, 0);
            DataView dV_error = dT_error.DefaultView;
            DataView dV_error_Count = dT_error.DefaultView;
            // Get Error Type List
            foreach (DataRow dr in dT_error.Rows)
            {
                ErrorType = dr["異常原因"].ToString().Split(',');
                foreach (string error in ErrorType)
                {
                    //if (!ErrorType_List.Contains(error) && error != "" && error != "Nouse")
                    //    ErrorType_List.Add(error);
                    if (!ErrorType_ListD.ContainsKey(error) && error != "" && error.ToUpper() != "NULL")
                    {
                        dV_error_Count = dT_error.DefaultView;
                        CountCondition = "異常原因" + " Like " + "'" + "%" + error + "%" + "'";
                        dV_error_Count.RowFilter = CountCondition;
                        ErrorType_ListD.Add(error, dV_error_Count.Count);
                    }
                }
            }
            var dicSort = from objDic in ErrorType_ListD orderby objDic.Value descending select objDic;//dec descending
            BreakCount = 1;
            // TimeCount = (ErrorType_ListD.Count > ShareMemory.ShowErrorCount) ? ShareMemory.ShowErrorCount : ErrorType_ListD.Count;
            //20191115開會決定由原本的3筆，改成匯出全部
            TimeCount = ErrorType_ListD.Count;
            foreach (KeyValuePair<string, int> kvp in dicSort)
            // Ans
            // foreach (string ErrorKind in ErrorType_List)//ErrorKind
            {
                if (kvp.Key == "" || kvp.Key.ToUpper() == "NOUSE") continue;
                //Init
                ErrorTimeSum = 0;
                //Table
                td += "<tr class='gradeX'> \n";
                td += "<td style='text-align:center;'>" + kvp.Key + "</td> \n";//Error Type
                string ss = "";
                foreach (ListItem item in LineList.Items) //Station
                {
                    if (item.Value == "0") continue;
                    ViewCondition = "工作站編號" + " = " + "'" + item.Value + "'" + " AND " + "異常原因" + " Like " + "'" + "%" + kvp.Key + "%" + "'";
                    dV_error.RowFilter = ViewCondition;
                    if (dV_error.Count != 0)
                    { //  td += "<td style='text-align:center;'>" + dV_error.Count.ToString() + "</td> \n";//count for different Line//<u><a href='/pages/dp_PM/Asm_LineOverView.aspx?LineNum=" + DataTableUtils.toString(dt_select.Rows[i]["工作站編號"]) + "'>" + DataTableUtils.toString(dt_select.Rows[i][j]) + "</a></u>
                      // td += "<td style='text-align:center;'><u><a href='/pages/dp_PM/Asm_Cahrt_Detail.aspx?Key=ErrorChat,LineNum=" + item.Value + ",Value=" + kvp.Key + ",StartTime=" + StartDate + ",EndTime=" + EndDate + "'>" + dV_error.Count.ToString() + "</a></u> " + "</td> \n";
                        string url = "Key=ErrorChat,LineNum=" + item.Value + ",Value=" + kvp.Key + ",StartTime=" + StartDate + ",EndTime=" + EndDate;
                        td += "<td style='text-align:center;'><u><a href='/pages/dp_PM/Asm_Cahrt_Detail.aspx?key=" + WebUtils.UrlStringEncode(url) + "'>" + dV_error.Count.ToString() + "</a></u> " + "</td> \n";
                    }
                    else
                        td += "<td style='text-align:center;'>" + dV_error.Count.ToString() + "</td> \n";
                }
                td += "</tr> \n";
                //Chart
                //chart format {  y: Num, indexLabel: Name },
                dV_error_Count = dT_error.DefaultView;
                CountCondition = "異常原因" + " Like " + "'" + "%" + kvp.Key + "%" + "'";
                dV_error_Count.RowFilter = CountCondition;
                if (BreakCount <= TimeCount)
                {
                    ChartDataStr_Count += "{y:" + (dV_error_Count.Count).ToString() + "," + "indexLabel:" + "'" + kvp.Key + "'" + "}" + "," + "\n";
                    change += kvp.Key + ",";
                    infStr[4] += kvp.Value + ",";
                }
                dt_er_sort = dV_error.ToTable();
                foreach (DataRow dr in dt_er_sort.Rows)
                    ErrorTimeSum += DataTableUtils.toDouble(dr["異常累積時間"].ToString());
                if (BreakCount <= TimeCount)
                {
                    if (BreakCount != TimeCount)
                        ErrorTime_ListD.Add(kvp.Key, ErrorTimeSum);
                    else
                    {
                        ErrorTime_ListD.Add(kvp.Key, ErrorTimeSum);
                        var dicTimeSort = from objDic in ErrorTime_ListD orderby objDic.Value descending select objDic;//dec descending
                        {
                            foreach (KeyValuePair<string, double> kvp_time in dicTimeSort)//時間
                            {
                                sortname += kvp_time.Value + "," + kvp_time.Key + ":";
                                infStr[5] += kvp_time.Value.ToString() + ",";
                            }
                            ChartDataStr_Time = sortresult(change, sortname, timetype);
                        }
                    }
                    //ChartDataStr_Time += "{y:" + ErrorTimeSum.ToString() + "," + "indexLabel:" + "'" + kvp.Key + ":" + ErrorTimeSum.ToString() + "秒" + "'" + "}" + "," + "\n";
                    BreakCount++;
                }
                dt_er_sort.Clear();
            }
            if (ChartDataStr_Count != "" && td != "")
            {
                infStr[0] = ChartDataStr_Count.Remove(ChartDataStr_Count.LastIndexOf(","), 1);
                int a = ChartDataStr_Time.LastIndexOf(",");
                //if(a != -1)
                infStr[2] = ChartDataStr_Time.Remove(ChartDataStr_Time.LastIndexOf(","), 1);
                infStr[3] = td;
            }
            return infStr;
        }
        //讓時間的標籤跟隨次數
        public string sortresult(string change, string sortname, string timetype)
        {
            if (timetype == "")
                timetype = "(分鐘)";

            string[] chsplit = change.Split(',');
            string[] sosplit = sortname.Split(':');
            int i;
            string[] all = new string[chsplit.Length - 1];

            for (int a = 0; a < sosplit.Length - 1; a++)
            {
                i = 0;
                for (int j = 0; j < chsplit.Length - 1; j++)
                {
                    if (chsplit[j] == sosplit[a].Split(',')[1])
                    {
                        if (timetype == "(分鐘)")
                        {
                            int times = Int32.Parse(sosplit[a].Split(',')[0]);
                            int minutes = times / 60;
                            all[i] = "{y:" + minutes + "," + "indexLabel:" + "'" + sosplit[a].Split(',')[1] + "'" + "}" + "," + "\n";
                        }
                        if (timetype == "(小時)")
                        {
                            int times = Int32.Parse(sosplit[a].Split(',')[0]);
                            int minutes = times / 3600;
                            all[i] = "{y:" + minutes + "," + "indexLabel:" + "'" + sosplit[a].Split(',')[1] + "'" + "}" + "," + "\n";
                        }

                        break;
                    }
                    else
                        i++;
                }
            }
            string result = "";
            for (int b = 0; b < all.Length; b++)
            {
                result += all[b];
            }
            return result;
        }
        public string[] GetComplianceInf(DropDownList LineList, string TimeType, string StartDate = "Today", string EndDate = "Today", string SelectLine = null)
        {
            int onTaget = 0;
            int unTaget = 0;
            int onTagetSum = 0;
            string RateSubStr = "";
            string td = "";
            string StartDateDay = "";
            string EndDateDay = "";
            string yearStr = "";
            string MonthStr = "";
            string dayStr = "";
            string hourStr = "";
            string[] infStr = new string[4];
            Dictionary<string, int> WorkStationInf_List = new Dictionary<string, int>();
            List<string> dateList = new List<string>();
            DataTable dt_OnTime = new DataTable();
            if (SelectLine == "0")
                SelectLine = null;
            WorkStationInf_List = GetWorkPointInf(SelectLine);
            if (WorkStationInf_List.Count > 1) //all line
            {
                if (TimeType == "day")
                {
                    StartDateDay = DateTime.Now.ToString("yyyyMMdd");
                    EndDateDay = DateTime.Now.ToString("yyyyMMdd");
                }
                else
                {
                    StartDateDay = StartDate.Substring(0, 8);//unit day
                    EndDateDay = EndDate.Substring(0, 8);//unit day
                }
                dateList = TrsDateList(TimeType, StartDateDay, EndDateDay);
                foreach (string date in dateList)
                {
                    td += "<tr class='gradeX'> \n";
                    td += "<td style='text-align:center;'>" + date.ToString() + "</td> \n";
                    foreach (KeyValuePair<string, int> LineInf in WorkStationInf_List)
                    {
                        onTaget = GetOnTagetPiece(TimeType, LineInf.Value, date.ToString(), date.ToString(), ref dt_OnTime);
                        onTagetSum += onTaget;
                        td += "<td style='text-align:center;'>" + onTaget + "</td> \n";
                    }
                    td += "</tr> \n";
                }
                infStr[0] = SeparationOnTaget(dt_OnTime, onTimeStatus.超前, WorkStationInf_List);
                infStr[1] = SeparationOnTaget(dt_OnTime, onTimeStatus.落後, WorkStationInf_List);
                infStr[3] = td;
                return infStr;
            }
            else //single
            {
                infStr[3] = td;
                return infStr;
            }
        }
        public string DispatchData(Dictionary<string, string> _dc_parameter, Dictionary<string, string> _dc_PageInf)
        {
            string td = "";
            string Condition = "";
            string[] strTime;
            int PredictionProgress = 0;
            bool Advance = false;
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            DateTime Now = DateTime.Now;
            DateTime Start;
            TimeSpan ts;
            DataRow Dr_Craft;
            if (_dc_parameter.Count != 0)
            {
                switch (_dc_parameter["Key"])
                {
                    case "ErrorChat":
                        //Pageinf
                        _dc_PageInf.Add("KeyTitle", "異常明細");
                        _dc_PageInf.Add("SubKeyTitle", "產線名稱");
                        _dc_PageInf.Add("ValueTitle", "異常類別");
                        _dc_PageInf.Add("Value", _dc_parameter["Value"].ToString());
                        _dc_PageInf.Add("FromPageAspx", "Asm_Cahrt_Error.aspx");
                        _dc_PageInf.Add("FromPageTitle", "產線異常原因");
                        //Ans Dc
                        if (_dc_parameter["StartTime"] == "Today" && _dc_parameter["EndTime"] == "Today")

                            Condition = "where " + "工作站異常紀錄資料表.工作站編號=" + _dc_parameter["LineNum"] + " AND " + " 異常起始時間>=" + "'" + DateTime.Now.ToString("yyyyMMdd") + "010101" + "'" + " AND " + "異常起始時間 <= " + "'" + DateTime.Now.ToString("yyyyMMdd") + "235959" + "'" + " AND " + "異常原因" + " Like " + "'" + "%" + _dc_parameter["Value"] + "%" + "'";
                        else
                            Condition = "where " + "工作站異常紀錄資料表.工作站編號=" + _dc_parameter["LineNum"] + " AND " + " 異常起始時間>=" + "'" + _dc_parameter["StartTime"] + "'" + " AND " + "異常起始時間 <= " + "'" + _dc_parameter["EndTime"] + "'" + " AND " + "異常原因" + " Like " + "'" + "%" + _dc_parameter["Value"] + "%" + "'";
                        // Get Datatable
                        DataTable dT_error = DataTableUtils.DataTable_GetTable("select 工作站型態資料表.工作站名稱,工作站異常紀錄資料表.工作站編號,排程編號,異常起始時間,異常排除時間,異常累積時間 from " + ShareMemory.SQLAsm_WorkStation_Error + "  INNER JOIN 工作站型態資料表 ON 工作站異常紀錄資料表.工作站編號 = 工作站型態資料表.工作站編號 " + Condition, 0, 0);
                        // Ans Data //組裝資料表.CUSTNM FROM 工作站狀態資料表  INNER JOIN 組裝資料表 ON 工作站狀態資料表.排程編號 = 組裝資料表.排程編號
                        dT_error.Columns.Add("異常歷程");
                        if (dT_error != null)
                        {
                            _dc_PageInf.Add("SubKey", dT_error.Rows[0]["工作站名稱"].ToString());
                            //
                            foreach (DataRow dr in dT_error.Rows)
                            {
                                ts = new TimeSpan(0, 0, DataTableUtils.toInt(dr["異常累積時間"].ToString()));
                                td += "<tr class='gradeX'> \n";
                                //排程編號
                                td += "<td style='text-align:center;'>" + dr["排程編號"].ToString() + "</td> \n";
                                //==========================異常起始時間
                                if (DataTableUtils.toLong(dr["異常起始時間"].ToString()) != 0)
                                {
                                    Start = DateTime.ParseExact(DataTableUtils.toString(dr["異常起始時間"]), "yyyyMMddHHmmss", System.Globalization.CultureInfo.CurrentCulture);
                                    td += "<td style='text-align:center;'>" + Start.ToString("yyyy-MM-dd HH:mm:ss") + "</td> \n";
                                }
                                else
                                    td += "<td style='text-align:center;'>" + "0" + "</td> \n";
                                //==========================
                                if (DataTableUtils.toLong(dr["異常排除時間"].ToString()) != 0)
                                {
                                    //異常排除時間
                                    td += "<td style='text-align:center;'>" + DateTime.ParseExact(DataTableUtils.toString(dr["異常排除時間"]), "yyyyMMddHHmmss", System.Globalization.CultureInfo.CurrentCulture).ToString("yyyy-MM-dd HH:mm:ss") + "</td> \n";
                                    //異常累積時間
                                    if (ts.Days != 0)
                                        td += "<td style='text-align:center;'>" + ts.Days.ToString() + "日" + ts.Hours.ToString().PadLeft(2, '0') + "時" + ts.Minutes.ToString().PadLeft(2, '0') + "分" + ts.Seconds.ToString().PadLeft(2, '0') + "秒" + "</td> \n";
                                    else if (ts.Hours != 0)
                                        td += "<td style='text-align:center;'>" + ts.Hours.ToString().PadLeft(2, '0') + "時" + ts.Minutes.ToString().PadLeft(2, '0') + "分" + ts.Seconds.ToString().PadLeft(2, '0') + "秒" + "</td> \n";
                                    else
                                        td += "<td style='text-align:center;'>" + ts.Minutes.ToString().PadLeft(2, '0') + "分" + ts.Seconds.ToString().PadLeft(2, '0') + "秒" + "</td> \n";
                                }
                                else
                                {
                                    //異常排除時間
                                    td += "<td style='text-align:center;'>" + "處理中..." + "</td> \n";
                                    //異常累積時間
                                    if (DataTableUtils.toLong(dr["異常起始時間"].ToString()) != 0)
                                    {
                                        Start = DateTime.ParseExact(DataTableUtils.toString(dr["異常起始時間"]), "yyyyMMddHHmmss", System.Globalization.CultureInfo.CurrentCulture);
                                        ts = Now - Start;
                                        td += "<td style='text-align:center;'>" + ts.Days.ToString() + "日" + ts.Hours.ToString().PadLeft(2, '0') + "時" + ts.Minutes.ToString().PadLeft(2, '0') + "分" + ts.Seconds.ToString().PadLeft(2, '0') + "秒" + "</td> \n";
                                    }
                                    else
                                        td += "<td style='text-align:center;'>" + "0" + "</td> \n";
                                }
                                //==========================
                                if (dr["異常歷程"].ToString() == "")
                                {
                                    string url = "Key=ErrorChatDetail" + ","
                                       + "LineNum=" + dT_error.Rows[0]["工作站編號"].ToString() + ","
                                       + "Value1=" + dr["排程編號"].ToString() + ","
                                       + "Value2=" + _dc_parameter["Value"].ToString() + ","
                                       + "SrcApsx=" + _dc_parameter["Key"].ToString() + "-" + _dc_parameter["LineNum"].ToString() + "-" + _dc_parameter["Value"].ToString() + "-" + _dc_parameter["StartTime"].ToString() + "-" + _dc_parameter["EndTime"].ToString();

                                    td += "<td style='text-align:center;'>" + "<u><a href='Asm_Cahrt_Detail.aspx?key=" + WebUtils.UrlStringEncode(url) + "'>" + "歷程" + "</a></u>" + " " + "</td> \n";
                                }

                                else
                                    td += "<td style='text-align:center;'>" + "空白" + "</td> \n";
                                //==========================
                                if (dr["工作站編號"].ToString() == "")
                                {
                                    //none
                                }
                                //==========================
                                td += "</tr> \n";
                            }
                        }
                        break;
                    case "ErrorChatDetail":
                        //Pageinf
                        if (_dc_parameter.ContainsKey("SrcApsx") && _dc_parameter["SrcApsx"].ToString() != "")
                            _dc_PageInf.Add("FromPageAspx", "Asm_Cahrt_Detail.aspx?" + GetSrcAspStr("Asm_Cahrt_Detail", _dc_parameter["SrcApsx"].ToString()));
                        else
                            _dc_PageInf.Add("FromPageAspx", "Asm_Cahrt_Detail.aspx");
                        _dc_PageInf.Add("FromPageTitle", "異常分類清單");
                        _dc_PageInf.Add("KeyTitle", "異常歷程");
                        _dc_PageInf.Add("SubKeyTitle", "排程編號");
                        _dc_PageInf.Add("SubKey", _dc_parameter["Value1"].ToString());
                        _dc_PageInf.Add("ValueTitle", "異常類別");
                        _dc_PageInf.Add("Value", _dc_parameter["Value2"].ToString());//key
                        //_dc_PageInf.Add("Value2", _dc_parameter["Value2"].ToString());//errortype
                        Condition = "排程編號=" + "'" + _dc_parameter["Value1"].ToString() + "'" + " AND " + "異常原因類型=" + "'" + _dc_parameter["Value2"].ToString() + "'";
                        //Ans Dc
                        // Get Datatable
                        DataTable dt_ErrorDetail = DataTableUtils.DataTable_GetTable("select 維護人員姓名,維護人員單位,維護內容,時間紀錄,處理狀態 from " + ShareMemory.SQLAsm_WorkStation_ErrorMant + " where " + Condition, 0, 0);
                        //// Ans Data //組裝資料表.CUSTNM FROM 工作站狀態資料表  INNER JOIN 組裝資料表 ON 工作站狀態資料表.排程編號 = 組裝資料表.排程編號
                        //
                        if (dt_ErrorDetail != null)
                        {
                            //dt_ErrorDetail.Columns.Add("累積時間");
                            //_dc_PageInf.Add("SubKey", dt_ErrorDetail.Rows[0]["工作站名稱"].ToString());
                            //

                            for (int i = 0; i < dt_ErrorDetail.Rows.Count; i++)
                            {
                                td += "<tr class='gradeX'> \n";

                                for (int j = 0; j < dt_ErrorDetail.Columns.Count; j++)
                                {
                                    if (dt_ErrorDetail.Columns[j].ColumnName == "維護人員姓名")//維護人員姓名
                                    {
                                        //td += "<td style='text-align:center;'>" + DataTableUtils.toString(dt_ErrorDetail.Rows[i][j]) + "</td> \n";
                                        strTime = dt_ErrorDetail.Rows[i]["時間紀錄"].ToString().Split(' ');
                                        td += "<td style='text-align:center;'>" + DataTableUtils.toString(dt_ErrorDetail.Rows[i][j]) + "<br>"
                                            + "<span style='font-size:2px ;text-align:right;color:gray;'> " + strTime[0] + "<br>" + strTime[1] + " " + strTime[2] + "</ span ></td> \n";
                                    }
                                    else if (dt_ErrorDetail.Columns[j].ColumnName == "時間紀錄")
                                    {
                                        //none
                                    }
                                    else if (dt_ErrorDetail.Columns[j].ColumnName == "處理狀態")
                                    {
                                        if (DataTableUtils.toString(dt_ErrorDetail.Rows[i]["處理狀態"]).ToUpper() != "TRUE")
                                            td += "<td style='text-align:center;color:red;'>" + "處理" + "</td> \n";
                                        else
                                            td += "<td style='text-align:center;color:green;'>" + "結案" + "</td> \n";
                                    }
                                    //else if (dt_ErrorDetail.Columns[j].ColumnName == "累積時間")
                                    //{
                                    //}
                                    else
                                        td += "<td style='text-align:center;'>" + DataTableUtils.toString(dt_ErrorDetail.Rows[i][j]) + "</td> \n";
                                }
                                td += "</tr> \n";
                            }

                        }
                        break;
                    case "Product_Detail"://{ "工藝名稱", "組裝人員", "標準工時", "起始時間", "完成時間", "預計完成" };
                        // page inf
                        _dc_PageInf.Add("KeyTitle", "組裝明細");
                        _dc_PageInf.Add("SubKeyTitle", "產線名稱");
                        _dc_PageInf.Add("ValueTitle", "排程編號");
                        _dc_PageInf.Add("Value", _dc_parameter["Value"].ToString());
                        //Data Process
                        Condition = "排程編號=" + "'" + _dc_parameter["Value"].ToString() + "'";
                        // DataTable dt = DataTableUtils.DataTable_GetTable("select 工作站型態資料表.工作站名稱,工作站型態資料表.工藝工程編號,執行工藝,實際啟動時間,實際完成時間,組裝累積時間,派工狀態,工作站狀態資料表.工作站編號 from " + ShareMemory.SQLAsm_WorkStation_State + " INNER JOIN 工作站型態資料表 ON 工作站狀態資料表.工作站編號 = 工作站型態資料表.工作站編號 " + Condition);
                        DataTable dt = DataTableUtils.DataTable_GetTable("select 工作站型態資料表.工作站名稱,工作站型態資料表.工藝流程點編號,執行工藝,派工狀態,工作站狀態資料表.工作站編號 ,狀態,進度,實際啟動時間,實際完成時間,暫停時間,組裝累積時間,異常累積時間 from " + ShareMemory.SQLAsm_WorkStation_State + " INNER JOIN 工作站型態資料表 ON 工作站狀態資料表.工作站編號 = 工作站型態資料表.工作站編號 " + " where " + Condition);
                        DataTable dt_log = DataTableUtils.DataTable_GetTable("select 員工資料表.員工姓名,登入人員,啟動時間,停止時間,完成時間 from " + ShareMemory.SQLAsm_WorkStation_Log + " INNER JOIN 員工資料表 ON 工作站歷程資料表.登入人員 = 員工資料表.員工編號 " + " where " + Condition);
                        //GetPredictionTimeStatus
                        if (dt.Rows.Count != 0 && dt.Rows[0]["狀態"].ToString() != "未動工")
                            Advance = GetPredictionTimeStatus(_dc_parameter["Value"].ToString(), ref PredictionProgress);
                        //"工藝名稱"================================================ 
                        if (dt.Rows.Count != 0 && dt_log != null)
                        {
                            _dc_PageInf.Add("SubKey", dt.Rows[0]["工作站名稱"].ToString());
                            _dc_PageInf.Add("FromPageTitle", dt.Rows[0]["工作站名稱"].ToString());
                            _dc_PageInf.Add("FromPageAspx", "Asm_LineOverView.aspx?LineNum=" + dt.Rows[0]["工作站編號"].ToString() + ",ReqType=Line");
                            foreach (DataRow dr in dt.Rows)
                            {
                                td += "<tr class='gradeX'> \n";
                                //工藝名稱================================================ 
                                if (dt.Rows[0]["執行工藝"].ToString() != null && dt.Rows[0]["執行工藝"].ToString() != "" && dt.Rows[0]["執行工藝"].ToString().ToUpper() != "NULL")
                                    td += "<td style='text-align:center;'>" + dt.Rows[0]["執行工藝"] + "</td> \n";
                                else if (dt.Rows[0]["工藝流程點編號"].ToString() != null && dt.Rows[0]["工藝流程點編號"].ToString() != "" && dt.Rows[0]["工藝流程點編號"].ToString().ToUpper() != "NULL")
                                {
                                    Condition = "工作流程序號=" + "'" + dt.Rows[0]["工藝流程點編號"].ToString() + "'";
                                    Dr_Craft = DataTableUtils.DataTable_GetDataRow(ShareMemory.SQLAsm_WorkPoint, Condition);
                                    if (Dr_Craft != null)
                                        td += "<td style='text-align:center;'>" + Dr_Craft["工作流程名稱"] + "</td> \n";
                                    else
                                        td += "<td style='text-align:center;'>" + "未定義" + "</td> \n";
                                }
                                else
                                    td += "<td style='text-align:center;'>" + "未定義" + "</td> \n";
                                //"組裝人員"================================================ 
                                if (dt.Rows[0]["派工狀態"].ToString() != null && dt.Rows[0]["派工狀態"].ToString() != "" && dt.Rows[0]["派工狀態"].ToString().ToUpper() != "NULL")
                                    td += "<td style='text-align:center;'>" + dt.Rows[0]["派工狀態"] + "</td> \n";
                                else
                                {
                                    if (dt_log.Rows.Count != 0)
                                        td += "<td style='text-align:center;'>" + dt_log.Rows[0]["員工姓名"].ToString() + "</td> \n";
                                    else
                                        td += "<td style='text-align:center;'>" + "未定義" + "</td> \n";
                                }
                                //"標準工時,平均工時"================================================ 
                                Condition = "工作流程序號=" + "'" + dt.Rows[0]["工藝流程點編號"].ToString() + "'";
                                Dr_Craft = DataTableUtils.DataTable_GetDataRow("select 工藝流程點資料表.工作流程名稱,工藝名稱資料表.最大工時,工藝名稱資料表.最小工時,工藝名稱資料表.目前工時,工藝名稱資料表.標準工時 from " + ShareMemory.SQLAsm_WorkPoint + " INNER JOIN 工藝名稱資料表 ON 工藝流程點資料表.工作流程名稱 = 工藝名稱資料表.工藝名稱 " + " where " + Condition);
                                //Dr_Craft = DataTableUtils.DataTable_GetDataRow(ShareMemory.SQLAsm_WorkCraft_Name, Condition);
                                if (Dr_Craft != null)
                                {
                                    ts = new TimeSpan(0, 0, DataTableUtils.toInt(Dr_Craft["標準工時"].ToString()));
                                    td += "<td style='text-align:center;'>" + (int)ts.TotalMinutes + "分" + "</td> \n";
                                    //ts = new TimeSpan(0, 0, DataTableUtils.toInt(Dr_Craft["目前工時"].ToString()));
                                    //td += "<td style='text-align:center;'>" + (int)ts.TotalMinutes + "分" + "</td> \n";
                                }
                                else
                                {
                                    td += "<td style='text-align:center;'>" + "未定義" + "</td> \n";
                                    td += "<td style='text-align:center;'>" + "未定義" + "</td> \n";
                                }
                                //目前工時-已使用時間================================================ 
                                //ts = new TimeSpan(0, 0, DataTableUtils.toInt(Dr_Craft["標準工時"].ToString()));
                                //td += "<td style='text-align:center;'>" + PredictionProgress * (int)ts.TotalMinutes / 100 + "分" + "</td> \n";
                                //組裝累積時間================================================ 
                                if (dt.Rows[0]["組裝累積時間"].ToString() != null && dt.Rows[0]["組裝累積時間"].ToString() != "" && dt.Rows[0]["組裝累積時間"].ToString().ToUpper() != "NULL")
                                {
                                    ts = new TimeSpan(0, 0, DataTableUtils.toInt(dt.Rows[0]["組裝累積時間"].ToString()));
                                    td += "<td style='text-align:center;'>" + (int)ts.TotalMinutes + "分" + "</td> \n";
                                }
                                else
                                    td += "<td style='text-align:center;'>" + "-" + "</td> \n";
                                //異常累積時間================================================ 
                                if (dt.Rows[0]["異常累積時間"].ToString() != null && dt.Rows[0]["異常累積時間"].ToString() != "" && dt.Rows[0]["異常累積時間"].ToString().ToUpper() != "NULL")
                                {
                                    ts = new TimeSpan(0, 0, DataTableUtils.toInt(dt.Rows[0]["異常累積時間"].ToString()));
                                    td += "<td style='text-align:center;'>" + (int)ts.TotalMinutes + "分" + "</td> \n";
                                }
                                else
                                    td += "<td style='text-align:center;'>" + "-" + "</td> \n";
                                //預定進度
                                // td += "<td style='text-align:center;'>" + PredictionProgress + "%" + "</td> \n";
                                //實際進度================================================ 
                                if ((PredictionProgress > DataTableUtils.toInt(dt.Rows[0]["進度"].ToString())) || !Advance)
                                    td += "<td style='text-align:center;color:red;'>" + dt.Rows[0]["進度"].ToString() + "%" + " || " + PredictionProgress + "%" + "</td> \n";
                                else
                                    td += "<td style='text-align:center;color:green;'>" + dt.Rows[0]["進度"].ToString() + "%" + " || " + PredictionProgress + "%" + "</td> \n";
                                //"起始時間"================================================ 
                                if (dr["實際啟動時間"].ToString() != null && dr["實際啟動時間"].ToString() != "" && dr["實際啟動時間"].ToString().ToUpper() != "NULL")
                                    td += "<td style='text-align:center;'>" + DateTime.ParseExact(DataTableUtils.toString(dr["實際啟動時間"]), "yyyyMMddHHmmss", System.Globalization.CultureInfo.CurrentCulture).ToString("MM月dd日-HH:mm:ss") + "</td> \n";
                                else
                                    td += "<td style='text-align:center;'>" + "未動工" + "</td> \n";
                                //"預計完成"================================================ 
                                if (Dr_Craft != null && dr["實際啟動時間"].ToString() != null && dr["實際啟動時間"].ToString() != "" && dr["實際啟動時間"].ToString().ToUpper() != "NULL")
                                    td += "<td style='text-align:center;'>" + GetPredictionTime(dr["實際啟動時間"].ToString(), Dr_Craft["標準工時"].ToString(), "早班", WorkType.人).ToString("MM月dd日-HH:mm:ss") + "</td> \n";
                                else
                                    td += "<td style='text-align:center;'>" + "" + "</td> \n";
                                //"停止時間", 
                                // if (dr["暫停時間"].ToString() != null && dr["暫停時間"].ToString() != "" && dr["暫停時間"].ToString().ToUpper() != "NULL")
                                //     td += "<td style='text-align:center;'>" + DateTime.ParseExact(DataTableUtils.toString(dr["暫停時間"]), "yyyyMMddHHmmss", System.Globalization.CultureInfo.CurrentCulture).ToString("dd-HH:m:ss") + "</td> \n";
                                // else
                                //     if (dt.Rows[0]["狀態"].ToString() != "未動工")
                                //     td += "<td style='text-align:center;'>" + "組裝中..." + "</td> \n";
                                // else
                                //     td += "<td style='text-align:center;'>" + "未動工" + "</td> \n";
                                //"實際完成"================================================ 
                                if (dr["實際完成時間"].ToString() != null && dr["實際完成時間"].ToString() != "" && dr["實際完成時間"].ToString().ToUpper() != "NULL")
                                    td += "<td style='text-align:center;'>" + DateTime.ParseExact(DataTableUtils.toString(dr["實際完成時間"]), "yyyyMMddHHmmss", System.Globalization.CultureInfo.CurrentCulture).ToString("MM月dd日-HH:mm:ss") + "</td> \n";
                                else
                                    td += "<td style='text-align:center;'>" + "未完成" + "</td> \n";
                                td += "</tr> \n";
                            }
                        }
                        break;
                    case "ErrorSearch_Detail":
                        //Pageinf
                        _dc_PageInf.Add("FromPageAspx", "Asm_ErrorSearch.aspx");
                        _dc_PageInf.Add("FromPageTitle", "維護歷程搜尋");
                        _dc_PageInf.Add("KeyTitle", "異常明細");
                        _dc_PageInf.Add("SubKeyTitle", "排程編號");
                        _dc_PageInf.Add("SubKey", _dc_parameter["Value1"].ToString());
                        _dc_PageInf.Add("ValueTitle", "異常類別");
                        _dc_PageInf.Add("Value", _dc_parameter["Value2"].ToString());//key
                        //_dc_PageInf.Add("Value2", _dc_parameter["Value2"].ToString());//errortype
                        Condition = "排程編號=" + "'" + _dc_parameter["Value1"].ToString() + "'" + " AND " + "異常原因類型=" + "'" + _dc_parameter["Value2"].ToString() + "'";
                        //Ans Dc
                        // Get Datatable
                        DataTable dt_ChartErrorDetail = DataTableUtils.DataTable_GetTable("select 維護人員姓名,維護人員單位,維護內容,時間紀錄,處理狀態 from " + ShareMemory.SQLAsm_WorkStation_ErrorMant + " where " + Condition, 0, 0);
                        //// Ans Data //組裝資料表.CUSTNM FROM 工作站狀態資料表  INNER JOIN 組裝資料表 ON 工作站狀態資料表.排程編號 = 組裝資料表.排程編號
                        //
                        if (dt_ChartErrorDetail != null)
                        {
                            //dt_ErrorDetail.Columns.Add("累積時間");
                            //_dc_PageInf.Add("SubKey", dt_ErrorDetail.Rows[0]["工作站名稱"].ToString());
                            //
                            for (int i = 0; i < dt_ChartErrorDetail.Rows.Count; i++)
                            {
                                td += "<tr class='gradeX'> \n";

                                for (int j = 0; j < dt_ChartErrorDetail.Columns.Count; j++)
                                {
                                    if (dt_ChartErrorDetail.Columns[j].ColumnName == "維護人員姓名")//維護人員姓名
                                    {
                                        //td += "<td style='text-align:center;'>" + DataTableUtils.toString(dt_ErrorDetail.Rows[i][j]) + "</td> \n";
                                        strTime = dt_ChartErrorDetail.Rows[i]["時間紀錄"].ToString().Split(' ');
                                        td += "<td style='text-align:center;'>" + DataTableUtils.toString(dt_ChartErrorDetail.Rows[i][j]) + "<br>"
                                            + "<span style='font-size:2px ;text-align:right;color:gray;'> " + strTime[0] + "<br>" + strTime[1] + " " + strTime[2] + "</ span ></td> \n";
                                    }
                                    else if (dt_ChartErrorDetail.Columns[j].ColumnName == "時間紀錄")
                                    {
                                        //none
                                    }
                                    else if (dt_ChartErrorDetail.Columns[j].ColumnName == "處理狀態")
                                    {
                                        if (DataTableUtils.toString(dt_ChartErrorDetail.Rows[i]["處理狀態"]).ToUpper() != "TRUE")
                                            td += "<td style='text-align:center;color:red;'>" + "處理" + "</td> \n";
                                        else
                                            td += "<td style='text-align:center;color:green;'>" + "結案" + "</td> \n";
                                    }
                                    //else if (dt_ErrorDetail.Columns[j].ColumnName == "累積時間")
                                    //{
                                    //}
                                    else
                                        td += "<td style='text-align:center;'>" + DataTableUtils.toString(dt_ChartErrorDetail.Rows[i][j]) + "</td> \n";
                                }
                                td += "</tr> \n";
                            }
                        }
                        break;
                    case "Asm_LineOverView_FinishSpecialFunction":
                        //Pageinf
                        _dc_PageInf.Add("FromPageAspx", "Asm_LineOverView.aspx?LineNum=" + _dc_parameter["LineNum"].ToString() + ",ReqType=Line");
                        _dc_PageInf.Add("FromPageTitle", "一般");
                        _dc_PageInf.Add("KeyTitle", "[鍊一廠]出貨預估");
                        _dc_PageInf.Add("SubKeyTitle", "午前到貨");
                        //_dc_PageInf.Add("SubKey", "8");
                        _dc_PageInf.Add("ValueTitle", "午後到貨");
                        //_dc_PageInf.Add("Value", "9");//key LineNum
                        string Condition1 = "工作站編號 = " + "'" + _dc_parameter["LineNum"].ToString() + "'" + " AND " + "實際完成時間 >=" + "'" + DateTime.Now.ToString("yyyyMMdd000000").ToString() + "'" + " AND " + "狀態=" + "'" + "完成" + "'";
                        Condition = Condition1;
                        DataTable dt_finish = DataTableUtils.DataTable_GetTable("select 組裝資料表.CUSTNM,組裝資料表.排程編號,實際完成時間 from " + ShareMemory.SQLAsm_WorkStation_State + " INNER JOIN 組裝資料表 ON 工作站狀態資料表.排程編號 = 組裝資料表.排程編號 " + " where " + Condition);

                        //// Ans Data //組裝資料表.CUSTNM FROM 工作站狀態資料表  INNER JOIN 組裝資料表 ON 工作站狀態資料表.排程編號 = 組裝資料表.排程編號
                        DataView dv_finsh = dt_finish.DefaultView;
                        dv_finsh.RowFilter = "實際完成時間 < " + "'" + DateTime.Now.ToString("yyyyMMdd") + "120000" + "'";
                        _dc_PageInf.Add("SubKey", dv_finsh.Count.ToString() + " 件");
                        dv_finsh = dt_finish.DefaultView;
                        dv_finsh.RowFilter = "實際完成時間 >= " + "'" + DateTime.Now.ToString("yyyyMMdd") + "120000" + "'";
                        _dc_PageInf.Add("Value", dv_finsh.Count.ToString() + " 件");//key LineNum
                        if (dt_finish != null)
                        {
                            foreach (DataRow dr_finish in dt_finish.Rows)
                            {
                                td += "<tr class='gradeX'> \n";
                                //======
                                if (dt_finish.Rows[0]["CUSTNM"].ToString() != null && dt_finish.Rows[0]["CUSTNM"].ToString() != "" && dt_finish.Rows[0]["CUSTNM"].ToString().ToUpper() != "NULL")
                                {
                                    td += "<td style='text-align:center;'>" + dr_finish["CUSTNM"].ToString() + "</td> \n";
                                }
                                else
                                    td += "<td style='text-align:center;'>" + "-" + "</td> \n";
                                //======
                                if (dt_finish.Rows[0]["排程編號"].ToString() != null && dt_finish.Rows[0]["排程編號"].ToString() != "" && dt_finish.Rows[0]["排程編號"].ToString().ToUpper() != "NULL")
                                {
                                    td += "<td style='text-align:center;'>" + dr_finish["排程編號"].ToString() + "</td> \n";
                                }
                                else
                                    td += "<td style='text-align:center;'>" + "-" + "</td> \n";
                                //======
                                if (dt_finish.Rows[0]["實際完成時間"].ToString() != null && dt_finish.Rows[0]["實際完成時間"].ToString() != "" && dt_finish.Rows[0]["實際完成時間"].ToString().ToUpper() != "NULL")
                                {
                                    Start = DateTime.ParseExact(dr_finish["實際完成時間"].ToString(), "yyyyMMddHHmmss", System.Globalization.CultureInfo.CurrentCulture);//  dr_finish["實際完成時間"].ToString()
                                    // td += "<td style='text-align:center;'>" + Start.ToString("MM月dd日HH時mm分ss秒") + "</td> \n";
                                    // send date
                                    td += "<td style='text-align:center;'>" + Start.AddDays(1).ToString("MM月dd日") + "</td> \n";
                                    // send time
                                    if (DataTableUtils.toInt(dr_finish["實際完成時間"].ToString().Substring(8, 2)) < 12)
                                        td += "<td style='text-align:center;'>" + "上午" + "</td> \n";
                                    else
                                        td += "<td style='text-align:center;'>" + "下午" + "</td> \n";
                                }
                                else
                                    td += "<td style='text-align:center;'>" + "-" + "</td> \n";
                                //======
                            }
                            td += "</tr> \n";

                        }
                        break;
                }
            }
            else
                td = NoDataProcess();
            return td;
        }
        public bool GetPredictionTimeStatus(string Key, ref int _PredictionProgress)
        {
            bool AdvanceStr = false;
            if (GetConnByDekVisTmp.IndexOf("DetaVisHor") < 0)
            {
                List<string> PredictionTimeInf = new List<string>();
                AdvanceStr = false;
                string Condition = "排程編號=" + "'" + Key + "'";
                DataTableUtils.Conn_String = GetConnByDekVisTmp;
                // DataTable dt = DataTableUtils.DataTable_GetTable("select 工作站型態資料表.工作站名稱,工作站型態資料表.工藝工程編號,執行工藝,實際啟動時間,實際完成時間,組裝累積時間,派工狀態,工作站狀態資料表.工作站編號 from " + ShareMemory.SQLAsm_WorkStation_State + " INNER JOIN 工作站型態資料表 ON 工作站狀態資料表.工作站編號 = 工作站型態資料表.工作站編號 " + Condition);
                DataRow dr_status = DataTableUtils.DataTable_GetDataRow("select 工作站型態資料表.工作站名稱,工作站型態資料表.工藝流程點編號,執行工藝,派工狀態,工作站狀態資料表.工作站編號 ,進度,狀態,實際啟動時間,實際完成時間,組裝累積時間 from " + ShareMemory.SQLAsm_WorkStation_State + " INNER JOIN 工作站型態資料表 ON 工作站狀態資料表.工作站編號 = 工作站型態資料表.工作站編號 " + " where " + Condition);
                DataRow Dr_Craft = null;
                DateTime PredictionTime;
                DateTime FinishTime;
                DateTime StartTime;
                DateTime RestTime;
                DateTime Result_StartTime;
                double ProcessSec;
                TimeSpan ts;
                //"工藝名稱", 
                if (dr_status != null)
                {
                    //"標準工時", 
                    Condition = "工作流程序號=" + "'" + dr_status["工藝流程點編號"].ToString() + "'";
                    try
                    {
                        Dr_Craft = DataTableUtils.DataTable_GetDataRow("select 工藝流程點資料表.工作流程名稱,工藝名稱資料表.最大工時,工藝名稱資料表.最小工時,工藝名稱資料表.目前工時,工藝名稱資料表.標準工時 from " + ShareMemory.SQLAsm_WorkPoint + " INNER JOIN 工藝名稱資料表 ON 工藝流程點資料表.工作流程名稱 = 工藝名稱資料表.工藝名稱 " + " where " + Condition);
                    }
                    catch
                    {
                        GetPredictionTimeStatus(Key, ref _PredictionProgress);
                    }
                    //Dr_Craft = DataTableUtils.DataTable_GetDataRow(ShareMemory.SQLAsm_WorkCraft_Name, Condition);
                    if (Dr_Craft != null)
                    {
                        //DateTime.ParseExact(DataTableUtils.toString(dr_status["實際完成時間"]), "yyyyMMddHHmmss", System.Globalization.CultureInfo.CurrentCulture).ToString("dd日HH時mm分ss秒");
                        //  GetPredictionTime(dr_status["啟動時間"].ToString(), Dr_Craft["標準工時"].ToString(), "早班", WorkType.人).ToString("dd日HH時mm分ss秒");
                        //"實際完成", 
                        if (dr_status["實際完成時間"].ToString() != null && dr_status["實際完成時間"].ToString() != "" && dr_status["實際完成時間"].ToString().ToUpper() != "NULL")
                        {
                            FinishTime = DateTime.ParseExact(DataTableUtils.toString(dr_status["實際完成時間"]), "yyyyMMddHHmmss", System.Globalization.CultureInfo.CurrentCulture);
                            PredictionTime = GetPredictionTime(dr_status["實際啟動時間"].ToString(), Dr_Craft["目前工時"].ToString(), "早班", WorkType.人);
                            _PredictionProgress = 100;
                            //PredictionTime = GetPredictionTime(dr_status["啟動時間"].ToString(), Dr_Craft["標準工時"].ToString(), "早班", WorkType.人);
                            if (FinishTime < PredictionTime)
                                return AdvanceStr = true;

                        }
                        else
                        {
                            if (DateTime.TryParseExact(dr_status["實際啟動時間"].ToString(), "yyyyMMddHHmmss", System.Globalization.CultureInfo.CurrentCulture, System.Globalization.DateTimeStyles.AssumeLocal, out Result_StartTime))
                            {
                                StartTime = Result_StartTime;
                                //StartTime = DateTime.ParseExact(dr_status["實際啟動時間"].ToString(), "yyyyMMddHHmmss", System.Globalization.CultureInfo.CurrentCulture);
                                RestTime = DateTime.ParseExact(dr_status["實際啟動時間"].ToString().Substring(0, 8) + "120000", "yyyyMMddHHmmss", System.Globalization.CultureInfo.CurrentCulture);
                                //if ((StartTime < RestTime && DateTime.Now < RestTime) || (StartTime > RestTime && DateTime.Now > RestTime))//morning to  today morning or  afternoon to  today afternoon
                                //    ts = DateTime.Now - StartTime;
                                //else 
                                if ((StartTime < RestTime && DateTime.Now < RestTime) || (StartTime > RestTime && DateTime.Now > RestTime))// //morning to  morning  or afternoon to  afternoon
                                    ts = DateTime.Now - StartTime;
                                else if (StartTime < RestTime && DateTime.Now > RestTime)// //morning to  afternoon
                                    ts = DateTime.Now.AddHours(-1) - StartTime;
                                else if ((StartTime < RestTime && DateTime.Now < RestTime.AddDays(1)) || (StartTime > RestTime && DateTime.Now > RestTime.AddDays(1)))//morning to  tomorrow morning or afternoon to  tomorrow afternoon
                                    ts = DateTime.Now.AddHours(-16) - StartTime;
                                else if (StartTime > RestTime && DateTime.Now < RestTime.AddDays(1)) //afternoon to  tomorrow morning
                                    ts = DateTime.Now.AddHours(-15) - StartTime;
                                else if (StartTime < RestTime && DateTime.Now > RestTime.AddDays(1))///morning to  tomorrow afternoon
                                    ts = DateTime.Now.AddHours(-17) - StartTime;
                                else
                                    ts = DateTime.Now - StartTime;
                                if (DataTableUtils.toInt(Dr_Craft["目前工時"].ToString()) != 0)
                                {
                                    ProcessSec = ts.TotalSeconds / DataTableUtils.toDouble(Dr_Craft["目前工時"].ToString()) * 100;
                                    if ((int)ProcessSec <= 100)
                                        _PredictionProgress = (int)ProcessSec;
                                    else
                                        _PredictionProgress = 100;
                                    PredictionTimeInf.Add(ProcessSec.ToString());
                                    if (ProcessSec < DataTableUtils.toInt(dr_status["進度"].ToString()))
                                        return AdvanceStr = true;
                                }
                            }
                        }
                    }
                }
            }

            return AdvanceStr;
        }
        public static void LineNote(int LineNum, string PK, string ErrorMsgType, string ErrorMsg, string ConnByDekVisTmp, string backman = "")
        {
            //Get Group and Token
            string CCSStr = "";
            string sql = "select 群組序號,工作站編號,工作站異常通知群組資料表.群組編號,工作站名稱,工作站異常通知資料表.群組編碼 from " + ShareMemory.SQLAsm_WorkStation_ErrorRingGroup + " INNER JOIN 工作站異常通知資料表 on 工作站異常通知群組資料表.群組編號 = 工作站異常通知資料表.群組編號";
            string condition = " where 工作站編號=" + "'" + LineNum + "'";
            DataRow dr_ccs;
            DataRow dr_line = DataTableUtils.DataTable_GetDataRow(sql + condition);
            DataRow dr_line_Name = DataTableUtils.DataTable_GetDataRow("select 工作站名稱 from " + ShareMemory.SQLAsm_WorkStation_Type + condition);
            if (ConnByDekVisTmp.Contains("DetaVisHor"))
                CCSStr = "CCS";
            else
                CCSStr = "ITEM_NO";
            dr_ccs = DataTableUtils.DataTable_GetDataRow("select " + CCSStr + " from " + ShareMemory.SQLAsm_RowsData + " where " + "排程編號=" + "'" + PK + "'");
            if (dr_line != null && dr_line_Name != null && dr_ccs != null)
            {
                //if (dr_line != null && dr_line_Name != null)
                //CCSStr = "1";
                string url = "ErrorID=" + PK + ",ErrorLineNum=" + LineNum.ToString() + ",ErrorLineName=" + dr_line_Name["工作站名稱"].ToString();
                url = "http://vis.deta.com.tw:57957/pages/dp_PM/Asm_ErrorDetail.aspx?key=" + WebUtils.UrlStringEncode(url);
                lineNotify(dr_line["群組編碼"].ToString(), "\r\n" + "[產線名稱]:" + dr_line_Name["工作站名稱"].ToString() + "\r\n" + "[回覆人員]:" + backman + "\r\n" + "[排程編號]:" + PK + "\r\n" + "[排程品號]:" + dr_ccs[CCSStr].ToString() + "\r\n" + "[異常類型]:" + ErrorMsgType + "\r\n" + "[異常內容]:" + ErrorMsg + "\r\n" + "[連結]:" + url);
                //lineNotify(dr_line["群組編碼"].ToString() , "\r\n" + "[產線名稱]:" + dr_line_Name["工作站名稱"].ToString() + "\r\n" + "[刀庫編號]:" + PK + "\r\n" + "[異常類型]:" + ErrorMsgType + "\r\n" + "[異常內容]:" + ErrorMsg + "\r\n" + "[連結]:" + "http://vis.deta.com.tw:57957/pages/dp_PM/Asm_ErrorDetail.aspx?ErrorID="+ PK + ",ErrorLineNum="+ LineNum .ToString()+ ",ErrorLineName="+ dr_line_Name["工作站名稱"].ToString());
            }
            //lineNotify(dr_line["群組編碼"].ToString(), "\r\n" + "[產線名稱]:" + dr_line_Name["工作站名稱"].ToString() + "\r\n" + "[刀庫編號]:" + PK + "\r\n" + "[異常類型]:" + ErrorMsgType + "\r\n" + "[異常內容]:" + ErrorMsg + "\r\n" + "[連結]:" + "http://vis.deta.com.tw:57957/login.aspx");
            //http://vis.deta.com.tw:57957/pages/dp_PM/Asm_ErrorDetail.aspx?ErrorID=MR5DV-190003,ErrorLineNum=12,ErrorLineName=%E9%96%8B%E7%99%BC
        }
        public static void lineNotify(string token, string msg)
        {
            //token = "Z9dDvOaQAKbQZ1ASNWmALCkFOXPIt9wqnrtoVa1JZFz";//deta assm_01
            // token = "hYXiaLkQTaIcPKQ4GOpbGZFkpQS6yfYbv4s66qEG7J7";//deta assm_02
            try
            {
                var request = (HttpWebRequest)WebRequest.Create("https://notify-api.line.me/api/notify");
                var postData = string.Format("message={0}", msg);
                var data = Encoding.UTF8.GetBytes(postData);

                request.Method = "POST";
                request.ContentType = "application/x-www-form-urlencoded";
                request.ContentLength = data.Length;
                request.Headers.Add("Authorization", "Bearer " + token);

                using (var stream = request.GetRequestStream()) stream.Write(data, 0, data.Length);
                var response = (HttpWebResponse)request.GetResponse();
                var responseString = new StreamReader(response.GetResponseStream()).ReadToEnd();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
        }
        public string ErrorDetailDeleteProcess(string ErrorNum, string acc)
        {
            // check acc can delete this Mant rec
            string deleteFailNum = "";
            string message = "";
            int LineNum = 0;
            DataTable dr_mant = ErrorDetail_CheckIdMappping(ErrorNum, acc);
            if (dr_mant != null)
            {
                // delete rec 
                if (!ErrorDetailDeleteActive(dr_mant, ref deleteFailNum))
                    message = "刪除維護編號" + deleteFailNum + "失敗!";
                // updata winForm && webform Vis 
                LineNum = reCorrectMantToStationStatus(dr_mant.Rows[0][ShareMemory.PrimaryKey].ToString());
                // updata machine_ID
                Set_MachineID_Line_Updata(LineNum.ToString());
                message = "維護編號" + ErrorNum + "刪除完成!";
            }
            else
            {
                message = "不能刪除非該帳號建立的維護訊息!";
            }
            return message;
        }
        public DateTime StrToDateTime(string time, string Sourceformat)
        {
            try
            {
                return DateTime.ParseExact(time, Sourceformat, System.Globalization.CultureInfo.CurrentCulture);
            }
            catch
            {
                return new DateTime();
            }
        }
        public static void record_user(string acc, string factory)
        {
            clsDB_Server clsDB = new clsDB_Server(myclass.GetConnByDekVisErp);
            DataTableUtils.Conn_String = myclass.GetConnByDekVisErp;

            string sql_cmd = "Select * from USERS where USER_ACC = '" + acc + "'";
            DataTable dt = DataTableUtils.GetDataTable(sql_cmd);

            if (dt.Rows.Count > 0)
            {
                DataRow row = dt.NewRow();
                row["LastVIewModel"] = factory;
                if (clsDB.Update_DataRow("USERS", "USER_ACC = '" + acc + "'", row))
                {

                }
            }

        }
        //==========================private==============================================
        private string GetSrcAspStr(string AspPage, string Parameter)
        {
            string[] srcAsp = Parameter.Split('-');
            string SrcAspStr = "";
            if (AspPage == "Asm_Cahrt_Detail")
            {
                SrcAspStr = "Key=" + srcAsp[0] + ",LineNum=" + srcAsp[1] + ",Value=" + srcAsp[2] + ",StartTime=" + srcAsp[3] + ",EndTime=" + srcAsp[4];
                //Key = ErrorChat,LineNum = 2,Value = 其他,StartTime = 20190401,EndTime = 20190430
            }
            return SrcAspStr;
        }
        private DataTable ErrorDetail_CheckIdMappping(string ErrorNum, string acc)
        {
            string Acc_Name = "";
            string[] ErrorNumAry = ErrorNum.Split(',');
            DataRow dr_Acc_Name = GetAccInf(acc);
            DataTable dt_mant;
            DataView dv_mant;
            if (dr_Acc_Name != null)
            {
                Acc_Name = dr_Acc_Name["USER_NAME"].ToString();
                // linq
                // dataview
                dt_mant = GetMantDataFromNum(ErrorNumAry);
                dv_mant = new DataView(dt_mant);
                if (dr_Acc_Name["Power"].ToString().ToUpper() != "Y")
                {
                    dv_mant.RowFilter = "維護人員姓名=" + "'" + Acc_Name + "'";
                    if (dv_mant.Count == 0)
                        return null;
                    else
                        return dt_mant;
                }
                else
                    return dt_mant;
            }
            return null;
        }
        private bool ErrorDetailDeleteActive(DataTable dt_mant, ref string num)
        {
            bool OK = false;
            foreach (DataRow dr in dt_mant.Rows)
            {
                if (DataTableUtils.Delete_Record(ShareMemory.SQLAsm_WorkStation_ErrorMant, "異常維護編號=" + "'" + dr["異常維護編號"].ToString() + "'"))
                    OK = true;
                else
                {
                    num = dr["異常維護編號"].ToString();
                    return false;
                }
            }
            return OK;
        }
        private int reCorrectMantToStationStatus(string key)
        {
            bool ok = false;
            DataTable dt_mant = DataTableUtils.DataTable_GetTable(ShareMemory.SQLAsm_WorkStation_ErrorMant, ShareMemory.PrimaryKey + "=" + "'" + key + "'", 0, 0);
            DataView dv_mant = new DataView(dt_mant);
            dv_mant.Sort = "異常維護編號 desc";
            DataRow dr_mant = dv_mant.ToTable().Rows[0];
            //
            DataRow dr_Key = DataTableUtils.DataTable_GetDataRow(ShareMemory.SQLAsm_WorkStation_State, ShareMemory.PrimaryKey + "=" + "'" + dr_mant[ShareMemory.PrimaryKey].ToString() + "'");
            //if (dr_Key["異常"].ToString() == dr_mant["異常原因類型"].ToString()) //same type
            //{
            dr_Key["維護"] = dr_mant["維護內容"].ToString() + " " + Convert.ToDateTime(dr_mant["時間紀錄"].ToString()).ToString("yyyy/MM/dd HH:mm:ss");
            ok = DataTableUtils.Update_DataRow(ShareMemory.SQLAsm_WorkStation_State, ShareMemory.PrimaryKey + "=" + "'" + dr_mant[ShareMemory.PrimaryKey].ToString() + "'", dr_Key);
            //}
            //
            return DataTableUtils.toInt(dr_Key["工作站編號"].ToString());
        }
        private int LineNumFromKey(string key)
        {
            int lineNum = 0;
            DataRow dr_line = DataTableUtils.DataTable_GetDataRow(ShareMemory.SQLAsm_WorkStation_State, ShareMemory.PrimaryKey = "'" + key + "'");
            if (dr_line != null)
                lineNum = DataTableUtils.toInt(dr_line["工作站編號"].ToString());
            return lineNum;
        }
        private string[] GetEachPiece(DataTable dt)
        {
            string[] str = new string[7] { "0", "0", "0", "0", "0", "0", "0" };//0:all   1:finsh   2:Stop  3:all   4:td_finish   5:td_Stop  7:Data
            //全部
            DataView dt_fin = new DataView(dt);
            str[0] = dt_fin.Count.ToString();
            //完成
            dt_fin = dt.DefaultView;
            dt_fin.RowFilter = "狀態 = '完成'";
            if (dt.Rows[0]["工作站編號"].ToString() != "5" && dt.Rows[0]["工作站編號"].ToString() != "6" && dt.Rows[0]["工作站編號"].ToString() != "7")
                str[1] = dt_fin.Count.ToString();
            else // special for deta
                str[1] = " <a href = 'Asm_Cahrt_Detail.aspx?Key=Asm_LineOverView_FinishSpecialFunction,LineNum=" + dt.Rows[0]["工作站編號"].ToString() + "' >" + dt_fin.Count.ToString() + "</a>";

            //暫停
            dt_fin = dt.DefaultView;
            dt_fin.RowFilter = "狀態 = '暫停'";
            str[2] = dt_fin.Count.ToString();

            //今日全部
            dt_fin = dt.DefaultView;
            dt_fin.RowFilter = "組裝日 =" + "'" + DateTime.Now.ToString("yyyyMMdd").ToString() + "'";
            str[3] = dt_fin.Count.ToString();

            //今日完成
            dt_fin = dt.DefaultView;
            dt_fin.RowFilter = "狀態 = '完成'" + " AND " + "組裝日 =" + "'" + DateTime.Now.ToString("yyyyMMdd").ToString() + "'";
            str[4] = dt_fin.Count.ToString();

            //今日暫停
            dt_fin = dt.DefaultView;
            dt_fin.RowFilter = "狀態 = '暫停'" + " AND " + "組裝日 =" + "'" + DateTime.Now.ToString("yyyyMMdd").ToString() + "'";
            str[5] = dt_fin.Count.ToString();


            return str;
        }
        private string GetErrorSearchCondition(string key, string LineNum, string ErrorType)
        {
            //=============
            string condition = "";
            string condition_Key = "排程編號  " + " Like " + "'" + "%" + key + "%" + "'";
            string condition_LineNum = "工作站異常紀錄資料表.工作站編號" + " = " + "'" + LineNum + "'";
            string condition_ErrorType = "異常原因  =" + "'" + ErrorType + "'";
            //=============
            if (key != "" && LineNum != "0" && ErrorType != "--Select--")//111
                condition = condition_Key + " AND " + condition_LineNum + " AND " + condition_ErrorType;
            else if (key != "" && LineNum != "0" && ErrorType == "--Select--")//110
                condition = condition_Key + " AND " + condition_LineNum;
            else if (key != "" && LineNum == "0" && ErrorType != "--Select--")//101
                condition = condition_Key + " AND " + condition_ErrorType;
            else if (key != "" && LineNum == "0" && ErrorType == "--Select--")//100
                condition = condition_Key;
            else if (key == "" && LineNum != "0" && ErrorType != "--Select--")//011
                condition = condition_LineNum + " AND " + condition_ErrorType;
            else if (key == "" && LineNum != "0" && ErrorType == "--Select--")//010
                condition = condition_LineNum;
            else //if (key == "" && LineNum == "0" && ErrorType != "--Select--")//001
                condition = condition_ErrorType;
            return condition;
        }
        private string GetHistorySearchCondition(string key, string LineNum)
        {
            //=============
            string condition = "";
            string condition_Key = "排程編號  " + " Like " + "'" + "%" + key + "%" + "'";
            string condition_LineNum = "工作站狀態資料表.工作站編號" + " = " + "'" + LineNum + "'";
            //=============
            if (key != "" && LineNum != "0")//11
                condition = condition_Key + " AND " + condition_LineNum;
            else if (key != "" && LineNum == "0")//10
                condition = condition_Key;
            else if (key == "" && LineNum != "0")//01
                condition = condition_LineNum;
            else //if (key == "" && LineNum == "0" && ErrorType != "--Select--")//00
                condition = condition_Key;
            return condition;
        }
        private string NoDataProcess()
        {
            //th = "<th class='center'>沒有資料載入</th>";
            string td = "<tr> <td class='center'> no data </ td ></ tr >";
            //title_text = "'沒有資料'";
            return td;
        }
        private void Note_MachineID_Line_Updata(string LineNum)
        {
            bool ok = false;
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            DataTable dt = DataTableUtils.GetDataTable(ShareMemory.SQLAsm_MachineID_Line, "機台產線代號" + "=" + "'" + LineNum + "'");
            foreach (DataRow dr in dt.Rows)
            {
                if (!(dr["是否有更新資料現場"].ToString().ToUpper() == "TRUE" || dr["是否有更新資料現場"].ToString().ToUpper() == "1"))
                {
                    dr["是否有更新資料現場"] = true;
                    ok = Support.DataTableUtils.Update_DataRow(ShareMemory.SQLAsm_MachineID_Line, "機台編號 =" + "'" + dr["機台編號"].ToString() + "'", dr);
                }
            }
        }
        private DataTable tableColumnSelectForLineDetail(DataTable src, string LineNum, string field = "", string interjoin = "")
        {
            string[] StrError;
            string CustomStr = "CUSTNM";
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            // string[] StrErrorTime;
            System.Data.DataView view = new System.Data.DataView(src);
            System.Data.DataTable selected = view.ToTable("Selected", false, "組裝日", "排程編號", "進度", "異常", "維護");
            DataTable tmp;
            //"add customer data'
            string Condition1 = "";
            string Condition2 = "";

            if (field == "")
            {
                Condition1 = "工作站編號 = " + "'" + LineNum.ToString() + "'" + " AND " + "實際組裝時間 =" + "'" + DateTime.Now.ToString("yyyyMMdd").ToString() + "'";
                Condition2 = "工作站編號 = " + "'" + LineNum.ToString() + "'" + " AND " + "實際組裝時間 <=" + "'" + DateTime.Now.ToString("yyyyMMdd").ToString() + "'" + " AND " + "狀態!=" + "'" + "完成" + "'";
            }
            else
            {
                Condition1 = "工作站狀態資料表.排程編號 = " + "'" + LineNum.ToString() + "'" + " AND " + "實際組裝時間 =" + "'" + DateTime.Now.ToString("yyyyMMdd").ToString() + "'";
                Condition2 = "工作站狀態資料表.排程編號 = " + "'" + LineNum.ToString() + "'" + " AND " + "實際組裝時間 <=" + "'" + DateTime.Now.ToString("yyyyMMdd").ToString() + "'";
            }
            string Condition = Condition1 + " OR " + Condition2;
            DataTable Cust_Name = DataTableUtils.GetDataTable("SELECT 工作站狀態資料表.排程編號,組裝資料表.CUSTNM FROM 工作站狀態資料表  INNER JOIN 組裝資料表 ON 工作站狀態資料表.排程編號 = 組裝資料表.排程編號 where " + Condition);
            if (Cust_Name == null)
            {
                string ss = "SELECT 工作站狀態資料表.排程編號,組裝資料表.客戶 " + field + "  FROM 工作站狀態資料表  INNER JOIN 組裝資料表 ON 工作站狀態資料表.排程編號 = 組裝資料表.排程編號  " + interjoin + "  where " + Condition + "order by 工作站編號 desc";
                Cust_Name = DataTableUtils.GetDataTable("SELECT 工作站狀態資料表.排程編號,組裝資料表.客戶 " + field + "  FROM 工作站狀態資料表  INNER JOIN 組裝資料表 ON 工作站狀態資料表.排程編號 = 組裝資料表.排程編號  " + interjoin + "  where " + Condition + " order by 工作站狀態資料表.工作站編號 desc");
                CustomStr = "客戶";
            }
            System.Data.DataView view_Name = new System.Data.DataView(Cust_Name);
            //DataTable Cust_Name = DataTableUtils.GetDataTable("SELECT 工作站狀態資料表.排程編號,組裝資料表.CUSTNM FROM 工作站狀態資料表  INNER JOIN 組裝資料表 ON 工作站狀態資料表.排程編號 = 組裝資料表.排程編號 where 工作站編號= " + "'" + LineNum + "'" + " AND 實際組裝時間 =" + "'" + DateTime.Now.ToString("yyyyMMdd").ToString() + "'");
            //DataTable Error_Name = DataTableUtils.GetDataTable("SELECT 工作站狀態資料表.排程編號, 工作站異常紀錄資料表.異常原因,工作站異常紀錄資料表.異常起始時間 FROM 工作站狀態資料表 INNER JOIN 工作站異常紀錄資料表 ON 工作站狀態資料表.排程編號 = 工作站異常紀錄資料表.排程編號");

            selected.Columns.Add("狀態");
            selected.Columns.Add("客戶");
            selected.Columns["狀態"].SetOrdinal(3);//series
            selected.Columns["客戶"].SetOrdinal(1);
            if (field != "")
            {
                selected.Columns.Add("工作站名稱");
                selected.Columns["工作站名稱"].SetOrdinal(1);
            }

            try
            {
                for (int i = 0; i < selected.Rows.Count; i++)
                {
                    view_Name = Cust_Name.DefaultView;
                    view_Name.RowFilter = "排程編號 = " + "'" + selected.Rows[i]["排程編號"].ToString() + "'";
                    tmp = view_Name.ToTable();
                    selected.Rows[i]["客戶"] = tmp.Rows[0][CustomStr].ToString();
                    if (field != "")
                        selected.Rows[i]["工作站名稱"] = tmp.Rows[i]["工作站名稱"].ToString();
                    if (selected.Rows[i]["異常"].ToString() != "")
                    {
                        StrError = selected.Rows[i]["維護"].ToString().Split(' ');
                        foreach (string Er in StrError)
                            selected.Rows[i]["異常"] += "," + Er;
                    }
                }
            }
            catch
            {
                return selected;
            }
            selected.Columns.Remove("維護");
            return selected;
        }
        private int CountOnTaget(DataTable dt_OnTarget)
        {
            int refProgress = 0;
            int count = 0;
            dt_OnTarget.Columns.Add("onTime");
            for (int i = 0; i < dt_OnTarget.Rows.Count; i++)
            {
                if (GetPredictionTimeStatus(dt_OnTarget.Rows[i][ShareMemory.PrimaryKey].ToString(), ref refProgress))
                {
                    dt_OnTarget.Rows[i]["onTime"] = "1";
                    count++;
                }
                else
                    dt_OnTarget.Rows[i]["onTime"] = "0";
            }
            return count;
        }
        private string SeparationOnTaget(DataTable dt_onTarget, onTimeStatus _onTimeStatus, Dictionary<string, int> _WorkStationInf_List)
        {
            string condition = "";
            string ChartStr = "";
            DataView dv = new DataView(dt_onTarget);
            // "{" + "y:" + DataTableUtils.toString(onTaget) + "," + "label:" + "'" + LineInf.Key + "'" + "}" + "," + infStr[0];
            if (_onTimeStatus == onTimeStatus.超前)
                condition = "1";
            else
                condition = "0";
            //
            foreach (KeyValuePair<string, int> LineInf in _WorkStationInf_List)
            {
                dv.RowFilter = "onTime =" + condition + " AND " + "工作站編號=" + "'" + LineInf.Value + "'";
                ChartStr = "{" + "y:" + DataTableUtils.toString(dv.Count) + "," + "label:" + "'" + LineInf.Key + "'" + "}" + "," + ChartStr;
            }
            return ChartStr;

        }
        //這裡要修改
        private DataTable EtableColumnSelectForLineDetail(DataTable src)
        {
            System.Data.DataView view = new System.Data.DataView(src);
            view.Sort = "時間紀錄 asc";
            System.Data.DataTable selected = view.ToTable("Selected", false, "異常維護編號", "時間紀錄", "維護人員姓名", "維護人員單位", "異常原因類型", "維護內容", "處理狀態", "圖片檔名");
            return selected;
        }
        private DataTable tableColumnSelectForErrorSearchList(DataTable src)
        {
            System.Data.DataView view = new System.Data.DataView(src);
            //System.Data.DataTable selected = view.ToTable("Selected", false, "排程編號", "時間紀錄", "維護人員姓名", "維護人員單位", "異常原因類型", "維護內容", "處理狀態");
            System.Data.DataTable selected = view.ToTable("Selected", false, "異常編號", "排程編號", "工作站名稱", "工作站編號", "異常原因", "異常起始時間");
            return selected;
        }
        private DataTable tableColumnSelectForHistorySearchList(DataTable src)
        {
            System.Data.DataView view = new System.Data.DataView(src);
            //System.Data.DataTable selected = view.ToTable("Selected", false, "排程編號", "時間紀錄", "維護人員姓名", "維護人員單位", "異常原因類型", "維護內容", "處理狀態");
            System.Data.DataTable selected = view.ToTable("Selected", false, "排程編號", "工作站名稱", "實際啟動時間", "實際完成時間", "組裝累積時間");
            return selected;
        }
        private DataTable tableColumnSelectForTotalLine(DataTable src)
        {
            System.Data.DataView view = new System.Data.DataView(src);
            System.Data.DataTable selected = view.ToTable("Selected", false, "工作站名稱", "目標件數", "工作站是否使用中", "工作站編號", "人數配置");
            //add Finish Count
            selected.Columns.Add("生產中");
            selected.Columns.Add("完成");
            selected.Columns.Add("暫停");
            selected.Columns.Add("今日生產中");
            selected.Columns.Add("今日完成");
            selected.Columns.Add("今日暫停");
            //selected.Columns.Add("資訊");
            //Get piece 
            for (int i = 0; i < selected.Rows.Count; i++)
            {
                selected.Rows[i]["生產中"] = GetLinePieceCount(DataTableUtils.toInt(selected.Rows[i]["工作站編號"].ToString()), "產線").ToString();
                selected.Rows[i]["完成"] = GetLinePieceCount(DataTableUtils.toInt(selected.Rows[i]["工作站編號"].ToString()), "完成").ToString();
                selected.Rows[i]["暫停"] = GetLinePieceCount(DataTableUtils.toInt(selected.Rows[i]["工作站編號"].ToString()), "暫停").ToString();
                selected.Rows[i]["今日生產中"] = GetLinePieceCount(DataTableUtils.toInt(selected.Rows[i]["工作站編號"].ToString()), "產線", "td").ToString();
                selected.Rows[i]["今日完成"] = GetLinePieceCount(DataTableUtils.toInt(selected.Rows[i]["工作站編號"].ToString()), "完成", "td").ToString();
                selected.Rows[i]["今日暫停"] = GetLinePieceCount(DataTableUtils.toInt(selected.Rows[i]["工作站編號"].ToString()), "暫停", "td").ToString();
                //selected.Rows[i]["資訊"] = "內容";
            }
            return selected;
        }
        private int GetLinePieceCount(int LineNum, string Status, string td = null)
        {
            string Condition1 = "";
            string Condition2 = "";
            string Condition = "";
            string CountCondition = "";
            Condition1 = "工作站編號 = " + "'" + LineNum + "'" + " AND " + "實際組裝時間 =" + "'" + DateTime.Now.ToString("yyyyMMdd").ToString() + "' ";
            Condition2 = "工作站編號 = " + "'" + LineNum + "'" + " AND " + "實際組裝時間 <=" + "'" + DateTime.Now.ToString("yyyyMMdd").ToString() + "' " + " AND " + "狀態!=" + "'" + "完成" + "'";
            if (td != "td")
                Condition = "(" + Condition1 + ")" + " OR " + "(" + Condition2 + ")";
            else
                Condition = "工作站編號 = " + "'" + LineNum + "'" + " AND " + "組裝日 =" + "'" + DateTime.Now.ToString("yyyyMMdd").ToString() + "' ";
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            DataTable dt = DataTableUtils.DataTable_GetTable("工作站狀態資料表", Condition);
            DataView dV_Status_Count = dt.DefaultView;
            if (Status == "產線" || dt.Rows.Count == 0)
                return dt.Rows.Count;
            else
            {
                dV_Status_Count = dt.DefaultView;
                CountCondition = "狀態" + " Like " + "'" + "%" + Status + "%" + "'";
                dV_Status_Count.RowFilter = CountCondition;
                return dV_Status_Count.Count;
            }
        }
        private DateTime GetPredictionTime(string StartTimeStr, string StandardTime, string WorkClass, WorkType _WorkType)
        {
            DateTime PredictionTime;
            DataTableUtils.Conn_String = GetConnByDekVisTmp;
            try
            {
                DataRow dr_class = DataTableUtils.DataTable_GetDataRow(ShareMemory.SQLAsm_WorkClass, "班次名稱=" + "'" + WorkClass + "'");
                string EndTime = dr_class["結束時間"].ToString();
                DateTime StartTime = DateTime.ParseExact(StartTimeStr, "yyyyMMddHHmmss", System.Globalization.CultureInfo.CurrentCulture);
                DateTime EarlyClassTime = DateTime.ParseExact(StartTimeStr.Substring(0, 8) + dr_class["結束時間"].ToString(), "yyyyMMddHHmmss", System.Globalization.CultureInfo.CurrentCulture);
                DateTime RestTime = DateTime.ParseExact(StartTimeStr.Substring(0, 8) + "120000", "yyyyMMddHHmmss", System.Globalization.CultureInfo.CurrentCulture);

                PredictionTime = StartTime.AddSeconds(DataTableUtils.toDouble(StandardTime));//StartTime+CraftStandardTime
                                                                                             //can not use mix work  class (human or work)
                if (StartTime < RestTime && PredictionTime < RestTime && PredictionTime < EarlyClassTime)//morning && not cross RestTime && corss early class
                    return PredictionTime;
                else if (StartTime < RestTime && PredictionTime > RestTime && PredictionTime < EarlyClassTime)//morning && not cross RestTime && corss early class
                {
                    if (PredictionTime.AddHours(1) > EarlyClassTime)//cross early class
                        return PredictionTime.AddHours(16);
                    else
                        return PredictionTime.AddHours(1);
                }
                else if (StartTime < RestTime && PredictionTime > RestTime && PredictionTime > EarlyClassTime)//morning && not cross RestTime && corss early class
                {
                    if (PredictionTime.AddHours(15) > RestTime.AddDays(1)) //cross tomorrow restTime
                        return PredictionTime.AddHours(17);
                    else
                        return PredictionTime.AddHours(16);
                }
                else if (StartTime > RestTime && PredictionTime < EarlyClassTime)//afternoon && not corss early class
                    return PredictionTime;
                else if (StartTime > RestTime && PredictionTime > EarlyClassTime)//afternoon && corss early class
                {
                    if (PredictionTime.AddHours(15) > RestTime.AddDays(1)) //cross tomorrow restTime
                        return PredictionTime.AddHours(16);
                    else
                        return PredictionTime.AddHours(15);
                }
                else
                    return PredictionTime;
            }
            catch
            {
                return DateTime.Now;
            }
        }
        private DataRow GetMantDataFromNum(string Num)
        {
            DataRow dr_mant = DataTableUtils.DataTable_GetDataRow(ShareMemory.SQLAsm_WorkStation_ErrorMant, "異常維護編號=" + "'" + Num + "'");
            return dr_mant;
        }
        private DataTable GetMantDataFromNum(string[] Mant_Num)
        {
            string condition = "";
            foreach (string num in Mant_Num)
            {
                if (num != Mant_Num.Last())
                    condition += "異常維護編號=" + "'" + num + "'" + " OR ";
                else
                    condition += "異常維護編號=" + "'" + num + "'";
            }
            DataTable dt_mant = DataTableUtils.DataTable_GetTable(ShareMemory.SQLAsm_WorkStation_ErrorMant, condition, 0, 0);
            return dt_mant;
        }
    }
    //=====================Class==============================================================
    class LineData
    {
        public int LineId { get; set; }
        public string LineName { get; set; }
    }
    public static class DateTransfor
    {
        public static IEnumerable<DateTime> EachDay(DateTime from, DateTime thru)
        {
            for (var day = from.Date; day.Date <= thru.Date; day = day.AddDays(1))
                yield return day;
        }
        public static IEnumerable<DateTime> EachMonth(DateTime from, DateTime thru)
        {
            for (var month = from.Date; month.Date <= thru.Date || month.Month == thru.Month; month = month.AddMonths(1))
                yield return month;
        }
        public static IEnumerable<DateTime> EachDayTo(this DateTime dateFrom, DateTime dateTo)
        {
            return EachDay(dateFrom, dateTo);
        }
        public static IEnumerable<DateTime> EachMonthTo(this DateTime dateFrom, DateTime dateTo)
        {
            return EachMonth(dateFrom, dateTo);
        }
    }

}